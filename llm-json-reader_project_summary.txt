# llm-json-reader

## Directory Structure

- llm-json-reader/
  - .editorconfig
  - .eslintignore
  - .eslintrc.json
  - .next/
  - .prettierignore
  - .prettierrc
  - .storybook/
    - main.ts
    - preview.js
  - .vscode/
    - settings.json
  - app/
    - about/
      - page.tsx
    - favicon.ico (binary file)
    - globals.css
    - layout.tsx
    - page.tsx
    - themeColors/
      - page.tsx
  - components/
    - atoms/
      - ArrowButton/
        - ArrowButton.tsx
        - index.ts
      - Button/
        - Button.tsx
        - index.ts
      - FileUploadButton/
        - FileUploadButton.tsx
        - index.ts
      - LinkButton/
        - index.ts
        - LinkButton.tsx
      - ThemeIcon/
        - index.ts
        - ThemeIcon.tsx
    - molecules/
      - AutoModeSelector/
        - AutoModeSelector.tsx
        - index.ts
      - Card/
        - Card.tsx
        - index.ts
      - FontSizeControl/
        - FontSizeControl.tsx
        - index.ts
      - MainCard/
        - index.ts
        - MainCard.tsx
      - SideAccordionItem/
        - index.ts
        - SideAccordionItem.tsx
      - SubCard/
        - index.ts
        - SubCard.tsx
      - ThemeSelector/
        - index.ts
        - ThemeSelector.tsx
      - ThemeToggle/
        - index.ts
        - ThemeToggle.tsx
    - organisms/
      - JsonCardViewer/
        - index.ts
        - JsonCardViewer.tsx
      - SideAccordion/
        - index.ts
        - SideAccordion.tsx
    - providers/
      - MainProvider/
        - index.ts
        - MainProvider.tsx
    - template/
      - Footer/
        - Footer.tsx
        - index.ts
      - JsonMainView/
        - index.ts
        - JsonMainView.tsx
      - JsonReadLayout/
        - index.ts
        - JsonReadLayout.tsx
      - MainLayout/
        - index.ts
        - MainLayout.tsx
      - Sidebar/
        - index.ts
        - Sidebar.tsx
  - dist/
  - hooks/
  - lib/
    - declarations/
    - env/
      - env.mjs
      - index.ts
    - utils/
      - cn/
        - cn.ts
        - index.ts
      - helpers/
        - countOccurrences.ts
        - helpers.ts
        - index.tx
  - next.config.mjs
  - package.json
  - postcss.config.js
  - public/
  - README.md
  - state/
    - atmos/
      - autoModeAtom.ts
      - fileNameAtom.ts
      - fontSizeAtoms.ts
      - jsonDataAtom.ts
      - themeAtom.ts
    - FileUploader.tsx
    - JsonPaginator.tsx
    - selectors/
  - styles/
    - globals.css
    - themeColorPalette.ts
  - tailwind.config.ts
  - tsconfig.json

## File Contents

### .editorconfig

```
# http://editorconfig.org
root = true

[*]
charset = utf-8
end_of_line = lf
indent_style = space
indent_size = 2
trim_trailing_whitespace = true
insert_final_newline = true

[*.{md,markdown}]
trim_trailing_whitespace = false
```

### .eslintignore

```
node_modules/
.next/
.nuxt/
.astro/
build/
dist/
out/
public/
package-lock.json
yarn.lock
pnpm-lock.yaml
vite.config.ts
next.config.js
tsconfig.json
src/env.d.ts
*.cjs
*.mjs
```

### .eslintrc.json

```
{
  "extends": [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended",
    "plugin:tailwindcss/recommended",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "rules": {
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports",
        "fixStyle": "separate-type-imports"
      }
    ],
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],
    "object-shorthand": "error",
    "tailwindcss/no-custom-classname": "off",
    "react/jsx-curly-brace-presence": "error",
    "react/self-closing-comp": [
      "error",
      {
        "component": true,
        "html": false
      }
    ],
    "@next/next/no-img-element": "off",
  }
}
```

### .prettierignore

```
node_modules/
.next/
.nuxt/
.astro/
build/
dist/
out/
public/
package-lock.json
yarn.lock
pnpm-lock.yaml
next.config.js
```

### .prettierrc

```
{
    "trailingComma": "all",
    "tabWidth": 2,
    "useTabs": false,
    "semi": false,
    "singleQuote": true,
    "jsxSingleQuote": false,
    "arrowParens": "always",
    "printWidth": 80,
    "bracketSpacing": true,
    "plugins": ["prettier-plugin-organize-imports"],
    "overrides": [
      {
        "files": "*.html",
        "options": {
          "printWidth": 360
        }
      },
      {
        "files": ["*.css", "*.scss"],
        "options": {
          "singleQuote": false
        }
      }
    ]
  }
```

### .storybook\main.ts

```
import { StorybookConfig } from '@storybook/nextjs';

const config: StorybookConfig = {
  // ...
  framework: '@storybook/nextjs',
};

export default config;

```

### .storybook\preview.js

```
export const parameters = {
  // ...
  darkMode: {
    darkClass: 'dark',
    stylePreview: true,
  },
};

```

### .vscode\settings.json

```
{
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.formatOnSave": true,
  "editor.formatOnPaste": true,
  "editor.codeActionsOnSave": {
    "source.addMissingImports": "explicit",
    "source.fixAll.eslint": "explicit",
  },
  "javascript.preferences.importModuleSpecifier": "non-relative",
  "typescript.preferences.importModuleSpecifier": "non-relative",
  "eslint.validate": [
    "html",
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "[typescript]": {
    "editor.tabSize": 2
  },
  "[scss]": {
    "editor.tabSize": 2
  },
  "CodeGPT.apiKey": "CodeGPT Plus Beta",
}

```

### app\about\page.tsx

```
// `app/page.tsx` is the UI for the `/` URL
export default function About() {
  const featuresItems = [
    { icon: 'üèéÔ∏è', name: 'XMLÂØæÂøú' },
    { icon: 'üîç', name: 'Ê§úÁ¥¢Ê©üËÉΩ' },
    { icon: 'üì¶', name: '„Éá„Éº„Çø„Éô„Éº„ÇπÈÄ£Êê∫' },
    { icon: 'üé§', name: '„Ç¢„Éó„É™‰ΩøÁî®ËÄÖ„ÅÆTTS„Å®ÈÄ£Êê∫„Åó„ÅüÈü≥Â£∞Âá∫Âäõ„É¢„Éº„Éâ' },
    { icon: 'üîí', name: 'MQTT„ÄÅÂèà„ÅØgRPC„Çí‰ΩøÁî®„Åó„Åü„Çπ„Éû„Éõ„Åã„Çâ„ÅÆÊìç‰Ωú' },
    { icon: 'üé®', name: '„Éá„Ç∂„Ç§„É≥„Ç´„Çπ„Çø„Éû„Ç§„Ç∫' },
  ];

  return (
    <div>
    <section className="bg-white px-4 dark:bg-gray-900">
      <div className="mx-auto grid max-w-screen-xl px-4 py-4 text-center lg:py-2">
        <div className="mx-auto place-self-center">
          <h1 className="mb-4 max-w-2xl text-4xl font-extrabold leading-none tracking-tight dark:text-white md:text-5xl xl:text-2xl">
            Json Reader for LLM Dataset
            <br /> (Large Language Models)
          </h1>
          <p className="mb-6 max-w-2xl font-light text-gray-500 dark:text-gray-400 md:text-lg lg:mb-8 lg:text-md">
            LLMÈñãÁô∫Áî®„Å´„ÄÅjson„ÉªjsonlÂΩ¢Âºè„Åß„ÅÇ„Çã„Éá„Éº„Çø„Çª„ÉÉ„Éà„ÇíÈñ≤Ë¶ßË¶ã„Çã„Åü„ÇÅ„ÅÆ„Ç¢„Éó„É™„Åß„Åô„ÄÇ
          </p>
        </div>
      </div>
    </section>
    <h2 className="text-bold mt-8 mb-10 text-3xl">üöÄ Features:</h2>
      <ul className="grid grid-cols-1 grid-rows-1 md:grid-cols-2 gap-4 lg:grid-cols-4">
        {featuresItems.map(({ icon, name }) => (
          <li
            key={name}
            className="flex flex-col text-center items-center hover:scale-105 transition-all hover:shadow-xl duration-300 justify-center gap-2 px-4 py-6 border rounded-lg shadow"
          >
            {/* <span className="text-xl">{icon}</span> */}
            <span>{name}</span>
          </li>
        ))}
      </ul>
      </div>
    );
};
```

### app\globals.css

```
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

```

### app\layout.tsx

```
'use client';

import { Inter } from "next/font/google";
import "./globals.css";

import React from "react";
import { RecoilRoot } from 'recoil';
import { MainProvider } from "@/components/providers/MainProvider"; import { MainLayout } from "@/components/template/MainLayout";
const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "LLM-Json-Reader",
//   description: "Json„Éï„Ç°„Ç§„É´„ÇíË™≠„ÇÄ„Å†„Åë„ÅÆÁâ©",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="ja">
      <body className={inter.className}>
        <RecoilRoot>
          <MainProvider>
            <MainLayout>{children}</MainLayout>
          </MainProvider>
        </RecoilRoot>
      </body>
    </html>
  );
}

```

### app\page.tsx

```
'use client';

import JsonMainView from "@/components/template/JsonMainView/JsonMainView";
import JsonReadLayout from "@/components/template/JsonReadLayout/JsonReadLayout";

const HomePage = () => {
  
  return (
    <div>
      <JsonReadLayout>
        <JsonMainView />
      </JsonReadLayout>
    </div>
  )
};

export default HomePage;
```

### app\themeColors\page.tsx

```
'use client'

import { useState } from "react";
import { useRecoilState } from "recoil";
import { ThemeMode, customThemeColorsAtom, themeAtom } from "@/state/atmos/themeAtom";

const ThemeColors = () => {
  const [, setTheme] = useRecoilState(themeAtom);
  const [customColors, setCustomColors] = useRecoilState(customThemeColorsAtom);
  const [editingThemeIndex, setEditingThemeIndex] = useState<number | null>(null);

  const handleThemeChange = (selectedTheme: ThemeMode) => {
    setTheme(selectedTheme);
  };

  const handleColorChange = (themeIndex: number, colorKey: string, colorValue: string) => {
    setCustomColors((prevColors) => {
      const newColors = [...prevColors];
      newColors[themeIndex] = { ...newColors[themeIndex], [colorKey]: colorValue };
      return newColors;
    });
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">„Ç´„Çπ„Çø„É†„ÉÜ„Éº„ÉûÈÅ∏Êäû</h1>
      <div className="grid grid-cols-2 gap-4">
        {customColors.map((theme, index) => (
          <div
            key={`custom${index}`}
            className="p-4 rounded cursor-pointer"
            onClick={() => handleThemeChange(`custom${index + 1}` as ThemeMode)}
          >
            <div className="p-4 rounded" style={{ backgroundColor: theme.main }}>
              <div className="mb-4">
                <h2 className="text-xl font-bold mb-2" style={{ color: "#000" }}>{theme.name}</h2>
              </div>
              <div className="rounded overflow-hidden">
                <div className="px-6 py-4" style={{ backgroundColor: theme.header, color: theme.headerText }}>
                  <div className="font-bold text-xl mb-2" style={{ color: theme.text }}>Header</div>
                </div>
                <div className="flex">
                  <div className="w-1/4 px-6 py-4" style={{ backgroundColor: theme.sidebar, color: theme.sidebarText }}>
                    <div className="font-bold text-xl mb-2" style={{ color: theme.text }}>Sidebar</div>
                    <div className="font-bold text-xl mb-2" style={{ color: theme.sidebarSelected }}>ÈÅ∏Êäû</div>
                    <p className="text-base" style={{ color: theme.text }}>Selected</p>
                  </div>
                  <div className="w-3/4 px-6 py-4" style={{ backgroundColor: theme.main, color: theme.mainText }}>
                    <div className="font-bold text-xl mb-2" style={{ color: theme.text }}>Main</div>
                    <p className="text-base" style={{ color: theme.text }}>Content goes here</p>
                  </div>
                </div>
                <div className="px-6 py-4" style={{ backgroundColor: theme.footer, color: theme.footerText }}>
                  <div className="font-bold text-xl mb-2" style={{ color: theme.text }}>Footer</div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ThemeColors;

```

### components\atoms\ArrowButton\ArrowButton.tsx

```
import React from 'react';

interface ArrowButtonProps {
  onClick?: () => void;
  disabled?: boolean;
  direction: 'left' | 'right';
}

export default function ArrowButton({ onClick, disabled, direction }: ArrowButtonProps) {
  const arrowIcon = direction === 'left' ? '‚Üê' : '‚Üí';

  return (
    <button
      className="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-1 px-2 rounded"
      onClick={onClick}
      disabled={disabled}
    >
      {arrowIcon}
    </button>
  );
}
```

### components\atoms\ArrowButton\index.ts

```
export * from './ArrowButton';

```

### components\atoms\Button\Button.tsx

```
import React from 'react';

interface ButtonProps {
  onClick?: () => void;
  disabled?: boolean;
  children: React.ReactNode;
}

export default function Button({ onClick, disabled, children }: ButtonProps) {
  return (
    <button
      className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
      onClick={onClick}
      disabled={disabled}
    >
      {children}
    </button>
  );
}

```

### components\atoms\Button\index.ts

```
export * from './Button';

```

### components\atoms\FileUploadButton\FileUploadButton.tsx

```
// components/atoms/FileUploadButton/FileUploadButton.tsx
import { jsonDataAtom } from '@/state/atmos/jsonDataAtom';
import { useSetRecoilState } from 'recoil';

const FileUploadButton = () => {
  const setJsonData = useSetRecoilState(jsonDataAtom);

  const handleUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const fileReader = new FileReader();

    if (event.target.files?.length) {
      const file = event.target.files[0];

      fileReader.readAsText(file);
      fileReader.onload = () => {
        try {
          const content = fileReader.result as string;

          if (!content.trim()) {
            console.error('Empty JSON file.');
            return;
          }

          let jsonData = JSON.parse(content);

          if (Array.isArray(jsonData)) {
            // JSON„Éá„Éº„Çø„ÅåÈÖçÂàó„ÅÆÂ†¥Âêà„ÄÅ„Éê„ÉÉ„ÇØ„Çπ„É©„ÉÉ„Ç∑„É•„Çí„Ç®„Çπ„Ç±„Éº„Éó„Åô„Çã
            const escapedContent = content.replace(/\\/g, '\\\\');
            jsonData = JSON.parse(escapedContent);
            setJsonData(jsonData);
          } else {
            console.error('Invalid file format. Expected an array of objects.');
          }
        } catch (error) {
          if (error instanceof SyntaxError) {
            console.error('Invalid JSON syntax:', error.message);
          } else {
            console.error('Error parsing JSON file:', error);
          }
        }
      };
    }
  };

  return (
    <div>
      <input type="file" onChange={handleUpload} accept=".json" title="JSON„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" />
    </div>
  );
};

export default FileUploadButton;

```

### components\atoms\FileUploadButton\index.ts

```
export * from './FileUploadButton';

```

### components\atoms\LinkButton\index.ts

```
export * from './LinkButton';

```

### components\atoms\LinkButton\LinkButton.tsx

```
// components/atoms/LinkButton.tsx
import Link from 'next/link';
import React from 'react';

interface LinkButtonProps {
  href: string;
  label: string;
}

const LinkButton: React.FC<LinkButtonProps> = ({ href, label }) => <Link href={href}>{label}</Link>;

export default LinkButton;

```

### components\atoms\ThemeIcon\index.ts

```
export * from './ThemeIcon';

```

### components\atoms\ThemeIcon\ThemeIcon.tsx

```
import React from 'react';

interface ThemeIconProps {
  theme: 'light' | 'dark';
}

const SunIcon: React.FC = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
    <path d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z" />
  </svg>
);

const MoonIcon: React.FC = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
    <path fillRule="evenodd" d="M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.69.75.75 0 01.981.98 10.503 10.503 0 01-9.694 6.46c-5.799 0-10.5-4.701-10.5-10.5 0-4.368 2.667-8.112 6.46-9.694a.75.75 0 01.818.162z" clipRule="evenodd" />
  </svg>
);

const ThemeIcon: React.FC<ThemeIconProps> = ({ theme }) => (
  theme === 'light' ? <MoonIcon /> : <SunIcon />
);

export default ThemeIcon;

```

### components\molecules\AutoModeSelector\AutoModeSelector.tsx

```
import { useRecoilState, useRecoilValue } from 'recoil';
import { autoModeSpeedAtom, customSpeedAtom, AutoModeSpeed } from '@/state/atmos/autoModeAtom';
import { indexAtom, jsonDataAtom } from '@/state/atmos/jsonDataAtom';
import { useEffect, useState } from 'react';

const AutoModeSelector: React.FC = () => {
  const [autoModeSpeed, setAutoModeSpeed] = useRecoilState(autoModeSpeedAtom);
  const [customSpeed, setCustomSpeed] = useRecoilState(customSpeedAtom);
  const jsonData = useRecoilValue(jsonDataAtom);
  const [index, setIndex] = useRecoilState(indexAtom);
  const [isLoading, setIsLoading] = useState(true);
  const [isAutoModeOn, setIsAutoModeOn] = useState(false);
  const [currentSecond, setCurrentSecond] = useState(0);
  const [remainingSeconds, setRemainingSeconds] = useState(0);

  useEffect(() => {
    if (jsonData.length > 0) {
      setIsLoading(false);
    }
  }, [jsonData]);

  useEffect(() => {
    let timer: NodeJS.Timeout;

    if (isAutoModeOn) {
      let totalSeconds = 0;

      switch (autoModeSpeed) {
        case '3s':
          totalSeconds = 3;
          break;
        case '5s':
          totalSeconds = 5;
          break;
        case '10s':
          totalSeconds = 10;
          break;
        case 'custom':
          totalSeconds = customSpeed;
          break;
        case 'textLength':
          const textLength = jsonData[index]?.input.length + jsonData[index]?.output.length || 0;
          totalSeconds = Math.ceil(textLength / 10); // 10ÊñáÂ≠ó„ÅÇ„Åü„Çä1Áßí
          break;
      }

      setCurrentSecond(0);
      setRemainingSeconds(totalSeconds);

      timer = setInterval(() => {
        setCurrentSecond((prevSecond) => prevSecond + 0.1); // 100„Éü„É™Áßí„Åî„Å®„Å´Êõ¥Êñ∞
        setRemainingSeconds((prevSeconds) => prevSeconds - 0.1);
      }, 100); // 100„Éü„É™Áßí„Åî„Å®„Å´ÂÆüË°å
    }

    return () => {
      clearInterval(timer);
    };
  }, [autoModeSpeed, customSpeed, isAutoModeOn, jsonData, index]);

  const handleSpeedChange = (speed: AutoModeSpeed) => {
    setAutoModeSpeed(speed);
    setIsAutoModeOn(speed !== 'off');
  };

  const handleCustomSpeedChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseInt(event.target.value, 10);
    setCustomSpeed(value);
  };

  if (isLoading) {
    return <div></div>;
  }

  return (
    <div className="flex items-center">
      <button
        className={`px-4 py-2 rounded ${isAutoModeOn ? 'bg-green-500 text-white' : 'bg-gray-300 text-gray-800'}`}
        onClick={() => handleSpeedChange(isAutoModeOn ? 'off' : '3s')}
      >
        {isAutoModeOn ? '„Ç™„Éº„Éà„É¢„Éº„Éâ' : '„Ç™„Éº„Éà„É¢„Éº„Éâ'}
      </button>
      <div className="flex ml-4">
        <button
          className={`px-4 py-2 rounded mx-1 ${autoModeSpeed === '3s' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-800'} whitespace-nowrap`}
          onClick={() => handleSpeedChange('3s')}
        >
          3Áßí
        </button>
        <button
          className={`px-4 py-2 rounded mx-1 ${autoModeSpeed === '5s' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-800'} whitespace-nowrap`}
          onClick={() => handleSpeedChange('5s')}
        >
          5Áßí
        </button>
        <button
          className={`px-4 py-2 rounded mx-1 ${autoModeSpeed === '10s' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-800'}`}
          onClick={() => handleSpeedChange('10s')}
        >
          10Áßí
        </button>
        {/* <button
          className={`px-4 py-2 rounded mx-1 ${autoModeSpeed === 'textLength' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-800'}`}
          onClick={() => handleSpeedChange('textLength')}
        >
          „ÉÜ„Ç≠„Çπ„Éà„ÅÆÈï∑„Åï
        </button> */}
      </div>
      <div className="ml-4 flex items-center relative">
        {isAutoModeOn && (
          <>
            <progress value={currentSecond} max={currentSecond + remainingSeconds} className="mr-2" />
            <span className="remaining-seconds">{remainingSeconds.toFixed(1)}Áßí</span>
          </>
        )}
        <span className="remaining-seconds empty"></span>
      </div>
    </div>
  );
};

export default AutoModeSelector;

```

### components\molecules\AutoModeSelector\index.ts

```
export * from "./AutoModeSelector";

```

### components\molecules\Card\Card.tsx

```
import React from 'react';
import { useRecoilValue } from 'recoil';

import { fontSizeAtom } from '@/state/atmos/fontSizeAtoms';

interface CardProps {
  title: string;
  content?: string;
  displayMode: 'selected' | 'prev' | 'next';
  onClick?: () => void;
}

export default function Card({ title, content = '', displayMode, onClick }: CardProps) {
  const fontSize = useRecoilValue(fontSizeAtom);

  const maxHeightClass = displayMode === 'selected' ? '' : 'max-h-40';
  const preClass = displayMode === 'selected' ? 'whitespace-pre-wrap break-words' : 'overflow-auto whitespace-pre-wrap';

  return (
    <div
      className={`bg-gray-100 border border-gray-300 rounded-lg p-4 shadow-md overflow-hidden cursor-pointer hover:bg-gray-200 transition-colors duration-300 ${maxHeightClass}`}
      onClick={onClick}
    >
      <h3 className="text-xl font-bold mb-2 text-gray-800">{title}</h3>
      <pre className={`text-sm text-gray-700 ${preClass}`} style={{ fontSize: `${fontSize}px` }}>
        {displayMode === 'selected'
          ? content || '„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„Åß„Åè„Å†„Åï„ÅÑ'
          : content
            ? `${content.slice(0, 100)}...`
            : '„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„Åß„Åè„Å†„Åï„ÅÑ'}
      </pre>
    </div>
  );
}

```

### components\molecules\Card\index.ts

```
export * from "./Card";
```

### components\molecules\FontSizeControl\FontSizeControl.tsx

```
import React from 'react';
import { useRecoilState } from 'recoil';

import { fontSizeAtom } from '@/state/atmos/fontSizeAtoms';

const FontSizeControl: React.FC = () => {
  const [fontSize, setFontSize] = useRecoilState(fontSizeAtom);

  const increaseFontSize = () => {
    setFontSize((prevSize) => Math.min(prevSize + 1, 40));
  };

  const decreaseFontSize = () => {
    setFontSize((prevSize) => Math.max(prevSize - 1, 12));
  };

  return (
    <div className='px-4 flex items-center'>
      <button className={`w-8 h-8 text-white text-lg rounded-full flex items-center justify-center ${fontSize === 12 ? 'bg-gray-500' : 'bg-blue-500'}`} onClick={decreaseFontSize}>
        -
      </button>
      <div className='min-w-[4rem] text-right px-4'>
        <span className="text-lg">{fontSize}px</span>
      </div>
      <button className={`w-8 h-8 bg-blue-500 text-white text-lg rounded-full flex items-center justify-center ${fontSize === 40 ? 'bg-gray-500' : 'bg-blue-500'}`} onClick={increaseFontSize}>
        +</button>
    </div>

  );
};

export default FontSizeControl;

```

### components\molecules\FontSizeControl\index.ts

```
export * from "./FontSizeControl";

```

### components\molecules\MainCard\index.ts

```
export * from "./MainCard";
```

### components\molecules\MainCard\MainCard.tsx

```
const MainCard = ({ children }: any) => {
  return (
    <div className="card">
      {children}
    </div>
  );
};

export default MainCard;
```

### components\molecules\SideAccordionItem\index.ts

```
export * from "./SideAccordionItem";
```

### components\molecules\SideAccordionItem\SideAccordionItem.tsx

```
import { useRecoilState } from "recoil";
import { indexAtom } from "@/state/atmos/jsonDataAtom";

const SideAccordionItem = ({ children }: any) => {
  const [index, setIndex] = useRecoilState(indexAtom);
  
  return (
    <div onClick={() => setIndex(index)}>
      <div>Index: {index}</div>
      <div>Category: {children.category}</div>
    </div>
  );
};

export default SideAccordionItem;
```

### components\molecules\SubCard\index.ts

```
export * from "./SubCard";
```

### components\molecules\SubCard\SubCard.tsx

```
const SubCard = ({ children }: any) => {
  return (
    <div className="card">
      {children}
    </div>
  );
};

export default SubCard;
```

### components\molecules\ThemeSelector\index.ts

```
export * from "./ThemeSelector";

```

### components\molecules\ThemeSelector\ThemeSelector.tsx

```
import { useRecoilState } from 'recoil';
// import { originalColors } from '@/styles/themeColorPalette';
import { themeAtom, ThemeMode } from '@/state/atmos/themeAtom';

const ThemeSelector = () => {
  const [theme, setTheme] = useRecoilState(themeAtom);

  const handleThemeChange = (selectedTheme: ThemeMode) => {
    setTheme(selectedTheme);
  };

  return (
    <div>
      <button onClick={() => handleThemeChange('light')}>Light</button>
      <button onClick={() => handleThemeChange('dark')}>Dark</button>
      {/* {originalColors.map((color, index) => (
        <button key={color.name} onClick={() => handleThemeChange(`original${index}` as ThemeMode)}>
          {color.name}
        </button>
      ))} */}
    </div>
  );
};

export default ThemeSelector;

```

### components\molecules\ThemeToggle\index.ts

```
export * from "./ThemeToggle";

```

### components\molecules\ThemeToggle\ThemeToggle.tsx

```
'use client'

import { useRecoilState, useRecoilValue } from 'recoil';
import ThemeIcon from '@/components/atoms/ThemeIcon/ThemeIcon';
import { customThemeColorsAtom, themeAtom } from '@/state/atmos/themeAtom';

import Link from 'next/link';

const ThemeToggle = () => {

  const [theme, setTheme] = useRecoilState(themeAtom);
  const customColors = useRecoilValue(customThemeColorsAtom);

  const toggleTheme = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

  const isCustomTheme = theme.startsWith('custom');

  return (
    <div className="flex items-center">
      <button
        onClick={toggleTheme}
        className={`p-2 rounded ${isCustomTheme ? 'opacity-50' : ''}`}
      >
        <ThemeIcon theme={theme as 'light' | 'dark' | string} />
      </button>
      {/* <Link href="/themeColors">
        <button className="ml-4 px-4 py-2 rounded bg-blue-500 text-white">
          ÈÅ∏Êäû„ÉÜ„Éº„ÉûËâ≤
        </button>
      </Link> */}
      {isCustomTheme && (
        <div
          className="ml-4 w-6 h-6 rounded-full"
          style={{
            backgroundColor:
              customColors[parseInt(theme.replace('custom', '')) - 1].main,
          }}
        />
      )}
    </div>
  );
};

export default ThemeToggle;

```

### components\organisms\JsonCardViewer\index.ts

```
export * from './JsonCardViewer';

```

### components\organisms\JsonCardViewer\JsonCardViewer.tsx

```
import { useRecoilState, useRecoilValue } from 'recoil';

import { jsonDataAtom, indexAtom } from '@/state/atmos/jsonDataAtom';
import { useCallback, useEffect } from 'react';
import React from 'react';

const JsonCardViewer = () => {
  const [jsonData, setJsonData] = useRecoilState(jsonDataAtom);
  const [index, setIndex] = useRecoilState(indexAtom);

  // useCallback„Éï„ÉÉ„ÇØ„ÇíuseEffect„ÅÆÂ§ñ„ÅßÂÆöÁæ©
  const handleArrowKey = useCallback((event: KeyboardEvent) => {
    console.log(index)
    if (event.key === 'ArrowRight') {
      setIndex((index) => Math.min(index + 1, jsonData.length - 1));
    } else if (event.key === 'ArrowLeft') {
      setIndex((index) => Math.max(index - 1, 0));
    }
  }, [index, jsonData.length]);

  useEffect(() => {
    window.addEventListener('keydown', handleArrowKey);
    return () => {
      window.removeEventListener('keydown', handleArrowKey);
    };
  }, [handleArrowKey]); // useCallback„Åß„É°„É¢Âåñ„Åï„Çå„ÅüÈñ¢Êï∞„Çí‰æùÂ≠òÈÖçÂàó„Å´ËøΩÂä†

  const nowCard = (item: any, originalIndex: number) => {
    // ÈÅ∏Êäû‰∏≠„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíË°®Á§∫
    if (originalIndex === index) {
      return (
        <div key={originalIndex.toString()}>
          <div>{JSON.stringify(item, null, 2)}</div>
        </div>
      );
    }
    return null;
  };

  const previousCard = (item: any, originalIndex: number) => {
    // ÈÅ∏Êäû‰∏≠„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅÆ1„Å§Ââç„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíË°®Á§∫
    if (index === 0) {
      // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Åå0„ÅÆÂ†¥Âêà„ÅØ "Start" „ÇíË°®Á§∫
      return (
        <div key={originalIndex}>
          <div>Start</div>
        </div>
      );
    } else if (originalIndex === index - 1) {
      return (
        <div key={originalIndex}>
          <div>Category: {item.category}</div>
          <div>Instruction: {item.instruction}</div>
        </div>
      );
    }
    return null;
  };

  const nextCard = (item: any, originalIndex: number) => {
    // ÈÅ∏Êäû‰∏≠„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅÆ1„Å§Âæå„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíË°®Á§∫
    if (originalIndex === jsonData.length) {
      // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅåjsonData„ÅÆÊúÄÂæå„ÅÆË¶ÅÁ¥†„ÅÆÂ†¥Âêà„ÅØ "Last" „ÇíË°®Á§∫
      return (
        <div key={originalIndex}>
          <div>Last</div>
        </div>
      );
    } else if (originalIndex === index + 1) {
      return (
        <div key={originalIndex}>
          <div>Category: {item.category}</div>
          <div>Instruction: {item.instruction}</div>
        </div>
      );
    }
    return null;
  };

  return (
    <div>
      {jsonData && jsonData.length > 0 ? (
        <>
          {previousCard(jsonData[index - 1], index - 1)}
          <div key={index}>
            {/* ÁèæÂú®„ÅÆ„Ç´„Éº„Éâ„ÇíË°®Á§∫ */}
            {nowCard(jsonData[index], index)}
          </div>
          {nextCard(jsonData[index + 1], index + 1)}
        </>
      ) : (
        <div>
          <p>„Éï„Ç°„Ç§„É´„Éá„Éº„Çø„Åå„Åæ„Å†Ë™≠„ÅøËæº„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ<br />
            jsonl„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
        </div>
      )}
    </div>
  );
};

export default JsonCardViewer;

```

### components\organisms\SideAccordion\index.ts

```
export * from './SideAccordion';

```

### components\organisms\SideAccordion\SideAccordion.tsx

```
const SideAccordion = () => {
  return (
    <div>
      
    </div>
  );
}

export default SideAccordion;
```

### components\providers\MainProvider\index.ts

```
export * from './MainProvider';

```

### components\providers\MainProvider\MainProvider.tsx

```
import { ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

// This is the place responsible for grouping all providers from the app
export const MainProvider = ({ children }: Props) => <>{children}</>;

```

### components\template\Footer\Footer.tsx

```
'use client';

import { useRecoilValue } from 'recoil';
import { fileNameAtom } from '@/state/atmos/fileNameAtom';
import { lightColors, darkColors } from '@/styles/themeColorPalette';
import { themeAtom, customThemeColorsAtom } from '@/state/atmos/themeAtom';

const Footer = () => {
  const fileName = useRecoilValue(fileNameAtom);
  const theme = useRecoilValue(themeAtom);
  const customColors = useRecoilValue(customThemeColorsAtom);

  const getColors = () => {
    switch (theme) {
      case 'light':
        return lightColors;
      case 'dark':
        return darkColors;
      default:
        if (theme.startsWith('custom')) {
          const customIndex = parseInt(theme.replace('custom', ''), 10) - 1;
          return customColors[customIndex];
        }
        return lightColors;
    }
  };

  const colors = getColors();

  return (
    <footer
      className="flex items-center justify-center p-4"
      style={{ backgroundColor: colors.footer, color: colors.footerText }}
    >
      {fileName || ''}
    </footer>
  );
};

export default Footer;

```

### components\template\Footer\index.ts

```
export * from './Footer';

```

### components\template\JsonMainView\index.ts

```
export * from './JsonMainView';

```

### components\template\JsonMainView\JsonMainView.tsx

```
import { useCallback, useEffect, useRef, useState } from "react";
import { useRecoilState, useRecoilValue } from "recoil";

import { indexAtom, jsonDataAtom } from "@/state/atmos/jsonDataAtom";

import Button from "@/components/atoms/Button/Button";
import Card from "@/components/molecules/Card/Card";
import ArrowButton from "@/components/atoms/ArrowButton/ArrowButton";
import { parseJsonData } from "@/lib/utils/helpers/helpers";
import { autoModeSpeedAtom, customSpeedAtom } from "@/state/atmos/autoModeAtom";
import AutoModeSelector from "@/components/molecules/AutoModeSelector/AutoModeSelector";
import FileUploader from "@/state/FileUploader";
import FontSizeControl from "@/components/molecules/FontSizeControl/FontSizeControl";

export const JsonMainView = () => {

  const [jsonData, setJsonData] = useRecoilState(jsonDataAtom);
  const [index, setIndex] = useRecoilState(indexAtom);
  const autoModeSpeed = useRecoilValue(autoModeSpeedAtom);
  const customSpeed = useRecoilValue(customSpeedAtom);

  const currentCard = jsonData[index];
  const prevCard = jsonData[index - 1];
  const nextCard = jsonData[index + 1];

  const handlePrevClick = () => {
    setIndex((prevIndex: number) => Math.max(prevIndex - 1, 0));
  };

  const handleNextClick = () => {
    setIndex((prevIndex: number) => Math.min(prevIndex + 1, jsonData.length - 1));
  };

  // useCallback„Éï„ÉÉ„ÇØ„ÇíuseEffect„ÅÆÂ§ñ„ÅßÂÆöÁæ©
  const handleArrowKey = useCallback((event: KeyboardEvent) => {
    if (event.key === 'ArrowRight' || event.key === 'ArrowDown') {
      setIndex((prevIndex: number) => Math.min(prevIndex + 1, jsonData.length - 1));
    } else if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {
      setIndex((prevIndex: number) => Math.max(prevIndex - 1, 0));
    }
  }, [setIndex, jsonData.length]);

  useEffect(() => {
    window.addEventListener('keydown', handleArrowKey);
    return () => {
      window.removeEventListener('keydown', handleArrowKey);
    };
  }, [handleArrowKey]);

  useEffect(() => {
    let timer: NodeJS.Timeout;

    if (autoModeSpeed !== 'off') {
      let delay = 0;

      switch (autoModeSpeed) {
        case '3s':
          delay = 3000;
          break;
        case '5s':
          delay = 5000;
          break;
        case '10s':
          delay = 10000;
          break;
        case 'custom':
          delay = customSpeed * 1000;
          break;
        case 'textLength':
          const textLength = jsonData[index]?.input.length || 0;
          delay = textLength * 50; // ÊñáÂ≠óÊï∞„Å´Âøú„Åò„Å¶ÁßíÊï∞„ÇíË®àÁÆóÔºà‰æã: 1ÊñáÂ≠ó„ÅÇ„Åü„Çä50„Éü„É™ÁßíÔºâ
          break;
      }

      timer = setTimeout(() => {
        setIndex((prevIndex) => (prevIndex + 1) % jsonData.length);
      }, delay);
    }

    return () => {
      clearTimeout(timer);
    };
  }, [autoModeSpeed, customSpeed, index, jsonData]);


  return (
    <div>
      <div className="mb-4 flex justify-between items-center">
        <div className="w-1/3 flex justify-start">
          <ArrowButton
            direction="left"
            onClick={handlePrevClick}
            disabled={index === 0}
          />
        </div>
        <div className="w-1/3 flex">
          <FileUploader />
          <FontSizeControl /> {/* „Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫Âà∂Âæ°„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíËøΩÂä† */}
        </div>
        <div className="w-1/3 flex justify-end">
          <ArrowButton
            direction="right"
            onClick={handleNextClick}
            disabled={index === jsonData.length - 1}
          />
        </div>
      </div>

      <AutoModeSelector />
      <br />
      
      {jsonData.length > 0 && (
        <div className="flex">
          <div className="w-1/2 h-32 .min-h-32 px-2">
            {prevCard || index !== 0 ? (
              <Card
                title="Ââç„ÅÆ„Éá„Éº„Çø"
                content={`Input: ${prevCard.input}\nOutput: ${prevCard.output}`}
                displayMode="prev"
                onClick={() => setIndex(index - 1)}
              />
            ) : (
              <Card title="1„Å§Ââç„ÅÆ„Éá„Éº„Çø„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì" content="ÂÖàÈ†≠„Éá„Éº„Çø" displayMode="prev" />
            )}
          </div>

          {/* Ê¨°„ÅÆ„Éá„Éº„Çø„ÇíË°®Á§∫ */}
          <div className="w-1/2 h-32 .min-h-32 px-2">
            {nextCard || index == jsonData.length + 1 ? (
              <Card
                title="Ê¨°„ÅÆ„Éá„Éº„Çø"
                content={`Input: ${nextCard.input}\nOutput: ${nextCard.output}`}
                displayMode="next"
                onClick={() => setIndex(index + 1)}
              />
            ) : (
              <Card title="Ê¨°„ÅÆ„Éá„Éº„Çø„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì" content="ÊúÄÁµÇ„Éá„Éº„Çø" displayMode="next" />
            )}
          </div>
        </div>
      )}

      {/* ÈÅ∏Êäû‰∏≠„ÅÆ„Éá„Éº„Çø„ÇíË°®Á§∫ */}
      {jsonData.length > 0 && (
        <div className="w-full overflow-hidden px-2 py-2">
          {currentCard ? (
        <Card
          title="ÁèæÂú®„ÅÆ„Éá„Éº„Çø"
          content={`Input: ${currentCard.input}\nOutput: ${currentCard.output}`}
          displayMode="selected"
        />
          ) : (
        <Card title="No Data" content="" displayMode="selected" />
          )}
        </div>
      )}
        </div>
  );
}

export default JsonMainView;

```

### components\template\JsonReadLayout\index.ts

```
export * from './JsonReadLayout';

```

### components\template\JsonReadLayout\JsonReadLayout.tsx

```
import React from 'react';

const JsonReadLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
   return <div className="flex-1 p-6">{children}</div>;
};

export default JsonReadLayout;

```

### components\template\MainLayout\index.ts

```
export * from './MainLayout';

```

### components\template\MainLayout\MainLayout.tsx

```
import { ReactNode } from 'react';
import Link from 'next/link';

import { cn } from '@/lib/utils/cn';
import { useRecoilValue } from 'recoil';

import Sidebar from '@/components/template/Sidebar/Sidebar';
import ThemeToggle from '@/components/molecules/ThemeToggle/ThemeToggle';
import { lightColors, darkColors } from '@/styles/themeColorPalette';
import { themeAtom, customThemeColorsAtom } from '@/state/atmos/themeAtom';
import { fileNameAtom } from '@/state/atmos/fileNameAtom';
import Footer from '@/components/template/Footer/Footer';

interface MainLayoutProps {
  children: ReactNode;
  className?: string;
}

const links = [
  { slug: '/', label: 'Home' },
  { slug: '/about', label: 'About' },
];

export const MainLayout = ({ children, className }: MainLayoutProps) => {
  const theme = useRecoilValue(themeAtom);
  const customColors = useRecoilValue(customThemeColorsAtom);
  const wrapperStyles = cn('layout flex flex-col min-h-screen 100vh', className);

  const getColors = () => {
    switch (theme) {
      case 'light':
        return lightColors;
      case 'dark':
        return darkColors;
      default:
        if (theme.startsWith('custom')) {
          const customIndex = parseInt(theme.replace('custom', ''), 10) - 1;
          return customColors[customIndex];
        }
        return lightColors;
    }
  };

  const colors = getColors();

  return (
    <div>
      <div className={wrapperStyles}>
        <div className="flex flex-col h-screen" style={{ backgroundColor: colors.main, color: colors.text }}>
          <header className="py-4 px-6" style={{ backgroundColor: colors.header, color: colors.headerText }}>
            <div className="flex justify-between items-center">
              <ul className="flex items-center gap-10 text-gray-500">
                {links.map(({ slug, label }) => (
                  <li key={slug}>
                    <Link href={slug} className="inline-block p-2 transition-colors hover:text-green-300">
                      {label}
                    </Link>
                  </li>
                ))}
              </ul>
              <ThemeToggle />
            </div>
          </header>
          <div className="flex flex-1 overflow-hidden">
            <div className="w-full md:w-[300px] lg:block hidden" style={{ backgroundColor: colors.sidebar }}>
              <Sidebar
                backgroundColor={colors.sidebar}
                textColor={colors.text}
                selectedBackgroundColor={colors.sidebarSelected}
                selectedTextColor={colors.text}
                hoverBackgroundColor={colors.sidebarHover}
              />
            </div>
            <main className="flex-grow overflow-y-auto p-6 md:w-[calc(100%-300px)] w-full">
              {children}
            </main>
          </div>
          <Footer />
        </div>
      </div>
    </div>
  );
};

export default MainLayout;

```

### components\template\Sidebar\index.ts

```
export * from './Sidebar';

```

### components\template\Sidebar\Sidebar.tsx

```
import { useRecoilState, useRecoilValue } from 'recoil';
import { indexAtom, jsonDataAtom } from '@/state/atmos/jsonDataAtom';
import { useRef, useEffect } from 'react';

interface SidebarProps {
  backgroundColor: string;
  textColor: string;
  selectedBackgroundColor: string;
  selectedTextColor: string;
  hoverBackgroundColor: string;
}

const Sidebar: React.FC<SidebarProps> = ({
  backgroundColor,
  textColor,
  selectedBackgroundColor,
  selectedTextColor,
  hoverBackgroundColor,
}) => {
  const jsonData = useRecoilValue(jsonDataAtom);
  const [index, setIndex] = useRecoilState(indexAtom);
  const selectedItemRef = useRef<HTMLDivElement | null>(null);
  const sidebarRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    if (selectedItemRef.current && sidebarRef.current) {
      const selectedItemRect = selectedItemRef.current.getBoundingClientRect();
      const sidebarRect = sidebarRef.current.getBoundingClientRect();

      const itemHeight = selectedItemRect.height;
      const visibleItemsHeight = itemHeight * 9; // ÈÅ∏Êäû‰∏≠„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíÂê´„ÇÅ„Å¶9„Å§ÂàÜ„ÅÆÈ´ò„Åï

      const scrollPosition = index * itemHeight - (sidebarRect.height - visibleItemsHeight) / 2;

      const topVisibleIndex = Math.floor(sidebarRef.current.scrollTop / itemHeight);
      const bottomVisibleIndex = topVisibleIndex + Math.floor(sidebarRect.height / itemHeight) - 1;

      if (index < topVisibleIndex + 4 || index > bottomVisibleIndex - 4) {
        sidebarRef.current.scrollTop = scrollPosition;
      }
    }
  }, [index, jsonData.length, jsonData]);


  return (
    <div
      ref={sidebarRef}
      className="p-4 h-full overflow-y-auto"
      style={{ backgroundColor, color: textColor }}
    >
      {jsonData?.length === 0 ? (
        <div className="text-center">LLM JP Eval „Éá„Éº„Çø„ÅÆ<br />„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„Åß„Åè„Å†„Åï„ÅÑ</div>
      ) : (
        jsonData.map((data, i) => (
          <div
            key={i}
            ref={index === i ? selectedItemRef : null}
            className={`py-2 px-4 cursor-pointer truncate overflow-hidden text-ellipsis whitespace-nowrap
              ${index === i ? 'selected' : 'hover:bg-gray-200'
              }`}
            style={{
              backgroundColor: index === i ? selectedBackgroundColor : '',
              color: index === i ? selectedTextColor : '',
            }}
            onClick={() => setIndex(i)}
          >
            {`${i}: ${data.input}`}
          </div>
        ))
      )}
    </div>
  );
};

export default Sidebar;

```

### lib\env\env.mjs

```
import { createEnv } from '@t3-oss/env-nextjs';
// import { z } from 'zod';

const skipValidation =
  !!process.env.SKIP_ENV_VALIDATION &&
  process.env.SKIP_ENV_VALIDATION !== 'false' &&
  process.env.SKIP_ENV_VALIDATION !== '0';

export const env = createEnv({
  skipValidation,
  server: {},
  client: {
    // NEXT_PUBLIC_EXAMPLE: z.string()
  },
  runtimeEnv: {
    // NEXT_PUBLIC_EXAMPLE: process.env.NEXT_PUBLIC_EXAMPLE
  }
});

```

### lib\env\index.ts

```
export * from './env.mjs';

```

### lib\utils\cn\cn.ts

```
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

/**
 * The function `cn` is a TypeScript function that merges multiple class lists into a single class
 * list.
 * @param {ClassValue[]} classLists - classLists is a rest parameter that allows you to pass in
 * multiple class lists as arguments. Each class list is represented by the ClassValue type.
 */
export const cn = (...classLists: ClassValue[]) => twMerge(clsx(classLists));

```

### lib\utils\cn\index.ts

```
export * from './cn';

```

### lib\utils\helpers\countOccurrences.ts

```
export function countOccurrences(array: any[], key: string): { [key: string]: number } {
  return array.reduce((acc, obj) => {
    const property = obj[key];
    acc[property] = (acc[property] || 0) + 1;
    return acc;
  }, {});
}
```

### lib\utils\helpers\helpers.ts

```
import { JsonData } from "@/state/atmos/jsonDataAtom";

// helpers.js
export default function processJsonData(jsonData: JSON | any) {
}

export function countOccurrences(array: any[], key: string): { [key: string]: number } {
  return array.reduce((acc, obj) => {
    const property = obj[key];
    acc[property] = (acc[property] || 0) + 1;
    return acc;
  }, {});
}

export const parseJsonData = (content: string): JsonData[] => {
  try {
    const jsonData = JSON.parse(content);

    if (Array.isArray(jsonData) && jsonData.every(isValidJsonData)) {
      return jsonData;
    } else {
      console.error('ÁÑ°Âäπ„Å™„Éï„Ç°„Ç§„É´ÂΩ¢Âºè„Åß„Åô„ÄÇÊúüÂæÖ„Åï„Çå„ÇãÂΩ¢Âºè„ÅÆJSON„Éá„Éº„Çø„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
      return [];
    }
  } catch (error) {
    console.error('ÁÑ°Âäπ„Å™JSON„Éá„Éº„Çø:', content);
    return [];
  }
};

function isValidJsonData(data: any): data is JsonData {
  return (
    typeof data === 'object' &&
    data !== null &&
    typeof data.ID === 'string' &&
    typeof data.instruction === 'string' &&
    typeof data.input === 'string' &&
    typeof data.output === 'string' &&
    typeof data.text === 'string'
  );
}
```

### lib\utils\helpers\index.tx

```
export * from './helpers';

```

### next.config.mjs

```
/** @type {import('next').NextConfig} */
const nextConfig = {
    output: "export",
    distDir: "dist"
};

export default nextConfig;

```

### package.json

```
{
  "name": "llm-json-reader",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "run-p -l -c --aggregate-output lint:*",
    "lint:eslint": "eslint .",
    "lint:prettier": "prettier --check .",
    "fix": "run-s fix:prettier fix:eslint",
    "fix:eslint": "npm run lint:eslint -- --fix",
    "fix:prettier": "npm run lint:prettier -- --write"
  },
  "dependencies": {
    "clsx": "^2.1.0",
    "next": "14.1.3",
    "react": "^18",
    "react-dom": "^18",
    "recoil": "^0.7.7",
    "scss": "^0.2.4",
    "sqlite3": "^5.1.7",
    "tailwind-merge": "^2.2.1"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.1.3",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}

```

### postcss.config.js

```
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

```

### README.md

```
# LLM-Json-Reader

LLM-Json-Reader„ÅØ„ÄÅJSON„Åä„Çà„Å≥JSONLÂΩ¢Âºè„ÅÆ„Éá„Éº„Çø„Çª„ÉÉ„Éà„ÇíÈñ≤Ë¶ßÁî®„Åß„Åô„ÄÇ<br />
Â§ßË¶èÊ®°Ë®ÄË™û„É¢„Éá„É´ÔºàLLMÔºâ„ÅÆÈñãÁô∫„Å´‰ΩøÁî®„Åï„Çå„Çã„Éá„Éº„Çø„Çª„ÉÉ„ÉàË¶ñË¶öÂåñ„ÅÆ„Åü„ÇÅ„ÅÆ„Ç¢„Éó„É™„Åß„Åô„ÄÇ

ÈñãÁô∫„Å´„ÅÇ„Åü„Çä„ÄÅÂèÇËÄÉ„Å´„Åï„Åõ„Å¶È†Ç„ÅÑ„Åü„Çµ„Ç§„ÉàÊßò<br />
[Next.js 14 + TypeScript + Tailwind + ESLint + Prettier Áí∞Â¢ÉÊßãÁØâÊâãÈ†Ü](https://zenn.dev/siakas/articles/05481bdefacd13)

#### Ë™≠Ëæº„Éá„Éº„Çø„Çª„ÉÉ„Éà„ÅÆÂØæÂøúÁä∂Ê≥Å

- [x] llm-jp-eval
- [ ] Mt-bench

##### llm-jp-eval
Ë§áÊï∞„ÅÆ„Éá„Éº„Çø„Çª„ÉÉ„Éà„ÇíÊ®™Êñ≠„Åó„Å¶Êó•Êú¨Ë™û„ÅÆÂ§ßË¶èÊ®°Ë®ÄË™û„É¢„Éá„É´„ÇíËá™ÂãïË©ï‰æ°„Åô„Çã„ÇÇ„ÅÆ„ÄÇ
„Äê„ÉÅ„É•„Éº„Éã„É≥„Ç∞ÂÖ±ÈÄö„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Äë„ÇíÈñ≤Ë¶ß„Åß„Åç„Åæ„Åô„ÄÇ<br />
[llm-jp-eval (github)](https://github.com/llm-jp/llm-jp-eval/tree/main)<br />
‰∏äË®ò„É™„É≥„ÇØÂÖà„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÊñπÊ≥ï„Åß„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Åü„ÇÇ„ÅÆ„Çí„ÄÅ„Éá„Éº„ÇøË™≠Ëæº„Å®„Åó„Å¶ÈÅ∏Êäû„Åè„Å†„Åï„ÅÑ„ÄÇ<br />
‰æã: llm-jp-eval/dataset_dir/(version)/tuning/dev/train/chabsa.json

#### „Éï„Ç©„Éº„Éû„ÉÉ„Éà‰æã
```
[
    {
        "ID": "jemhopqa-0",
        "instruction": "Ë≥™Âïè„ÇíÂÖ•Âäõ„Å®„Åó„ÄÅÂõûÁ≠î„ÇíÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂõûÁ≠î„ÅÆ‰ªñ„Å´„ÅØ‰Ωï„ÇÇÂê´„ÇÅ„Å™„ÅÑ„Åì„Å®„ÇíÂé≥ÂÆà„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "input": "Ë≥™ÂïèÔºö„ÇØ„Ç§„Éº„É≥„Å®„Éì„Éº„Éà„É´„Ç∫„ÅØ„Å©„Å°„Çâ„ÇÇ„Ç§„ÇÆ„É™„ÇπÂá∫Ë∫´„ÅÆ„Éê„É≥„Éâ„Åß„Åô„ÅãÔºü",
        "output": "YES",
        "text": "<INSTRUCTION|LLM-jp>Ë≥™Âïè„ÇíÂÖ•Âäõ„Å®„Åó„ÄÅÂõûÁ≠î„ÇíÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂõûÁ≠î„ÅÆ‰ªñ„Å´„ÅØ‰Ωï„ÇÇÂê´„ÇÅ„Å™„ÅÑ„Åì„Å®„ÇíÂé≥ÂÆà„Åó„Å¶„Åè>„Å†„Åï„ÅÑ„ÄÇ\n<INPUT|LLM-jp>Ë≥™ÂïèÔºö„ÇØ„Ç§„Éº„É≥„Å®„Éì„Éº„Éà„É´„Ç∫„ÅØ„Å©„Å°„Çâ„ÇÇ„Ç§„ÇÆ„É™„ÇπÂá∫Ë∫´„ÅÆ„Éê„É≥„Éâ„Åß„Åô„ÅãÔºü\n<OUTPUT|LLM-jp>YES"
    },
    {
        "ID": "jemhopqa-1",
        "instruction": "Ë≥™Âïè„ÇíÂÖ•Âäõ„Å®„Åó„ÄÅÂõûÁ≠î„ÇíÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂõûÁ≠î„ÅÆ‰ªñ„Å´„ÅØ‰Ωï„ÇÇÂê´„ÇÅ„Å™„ÅÑ„Åì„Å®„ÇíÂé≥ÂÆà„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "input": "Ë≥™ÂïèÔºöÊù±‰∫¨ÈÉΩ‰∏≠Â§ÆÂå∫„Å®‰∏≠ÈáéÂå∫„ÄÅ2005Âπ¥ÊôÇÁÇπ„Åß„ÅÆÊòºÈñì‰∫∫Âè£„ÅåÂ§ö„ÅÑ„ÅÆ„ÅØ‰∏≠Â§ÆÂå∫„Åß„Åô„ÅãÔºü",
        "output": "YES",
        "text": "<INSTRUCTION|LLM-jp>Ë≥™Âïè„ÇíÂÖ•Âäõ„Å®„Åó„ÄÅÂõûÁ≠î„ÇíÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂõûÁ≠î„ÅÆ‰ªñ„Å´„ÅØ‰Ωï„ÇÇÂê´„ÇÅ„Å™„ÅÑ„Åì„Å®„ÇíÂé≥ÂÆà„Åó„Å¶„Åè>„Å†„Åï„ÅÑ„ÄÇ\n<INPUT|LLM-jp>Ë≥™ÂïèÔºöÊù±‰∫¨ÈÉΩ‰∏≠Â§ÆÂå∫„Å®‰∏≠ÈáéÂå∫„ÄÅ2005Âπ¥ÊôÇÁÇπ„Åß„ÅÆÊòºÈñì‰∫∫Âè£„ÅåÂ§ö„ÅÑ„ÅÆ„ÅØ‰∏≠Â§ÆÂå∫„Åß„Åô„ÅãÔºü\n<OUTPUT|LLM-jp>YES"
    },
    ...
]

```
<br />

#### MT-bench
ÂØæÂøú‰∫àÂÆö

## „Ç¢„Éó„É™‰ΩúÂãï„Å´ÂøÖË¶Å„Å®„Å™„Çã‰∫ãÂâç„Ç§„É≥„Çπ„Éà„Éº„É´Áâ©
#### Node.js (version20.9.0„Çí‰ΩøÁî®)
Node.js„ÅØ„ÄÅ„Éñ„É©„Ç¶„Ç∂Â§ñ„ÅßJavaScript„ÇíÂÆüË°å„Åô„Çã„Åü„ÇÅ„ÅÆ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„Åß„Åô„ÄÇ„Åì„Çå„Å´„Çà„Çä„ÄÅJavaScript„Çí‰Ωø„Å£„Å¶„Çµ„Éº„Éê„Éº„Çµ„Ç§„Éâ„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÈñãÁô∫„Åô„Çã„Åì„Å®„ÅåÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åô„ÄÇ<br />
Node.js„Çí‰ΩøÁî®„Åô„Çã„Å´„ÅÇ„Åü„Å£„Å¶„ÅØ„ÄÅnvm„Å™„Å©„ÅÆNode.js„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„ÉÑ„Éº„É´„Çí‰ΩøÁî®„Åô„Çã„Åì„Å®„ÇíÊé®Â•®„Åó„Åæ„Åô„ÄÇ<br />
python„ÅßË®Ä„ÅÜ„Å®„Åì„Çç„ÅÆpyenvÔºàË§áÊï∞„ÅÆpython„Éê„Éº„Ç∏„Éß„É≥„ÇíÂàá„ÇäÊõø„Åà„Å¶‰ΩøÁî®„Åß„Åç„ÇãÊäÄË°ìÔºâ„ÄÇ

#### pnpm
pnpm„ÅØ„Äåperformant npm„Äç„Å®„ÅÑ„ÅÜÊÑèÂë≥„Åß„ÄÅnpm„ÇÑyarn„Å®‰∏¶„Å∂JavaScript„ÅÆ„Éë„ÉÉ„Ç±„Éº„Ç∏„Éû„Éç„Éº„Ç∏„É£„Éº„Åß„Åô„ÄÇ<br />
yarn„Çí‰ΩøÁî®„Åô„Çã‰∫àÂÆö„Åß„Åó„Åü„Åå„ÄÅ„Ç§„É≥„Çπ„Éà„Éº„É´„ÅÆÈöõ„ÅÆÈ´òÈÄüÂåñ„ÄÅÂÆπÈáè„ÅÆÂäπÁéáÂåñ„ÅÆ„Åü„ÇÅÊé°Áî®„Åó„Å¶„ÅÇ„Çä„Åæ„Åô„ÄÇ

## „Ç§„É≥„Çπ„Éà„Éº„É´Ôºà‰ΩøÁî®ÊñπÊ≥ïÔºâ

1. „É™„Éù„Ç∏„Éà„É™„Çí„ÇØ„É≠„Éº„É≥„Åó„Åæ„Åô„ÄÇÔºàËá™ÂàÜ„ÅÆ„Éë„ÇΩ„Ç≥„É≥„Å´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åô„Çã„Çà„ÅÜ„Å™„ÇÇ„ÅÆÔºâ

```bash
git clone https://github.com/yourusername/llm-json-reader.git
```

2. ÂøÖË¶Å„Å™‰æùÂ≠òÈñ¢‰øÇ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åô„Çã„Åü„ÇÅ„Å´„ÄÅ„Éï„Ç©„É´„ÉÄÂÜÖ„Å´ÁßªÂãï„Åó„ÄÅ<br />
   „Ç§„É≥„Çπ„Éà„Éº„É´„ÅÆ„Åü„ÇÅ„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ

```bash
cd llm-json-reader
```
```bash
pnpm install
```

Ôºà‚Äª „Éï„Ç©„É´„ÉÄ„Å´ÁßªÂãï„Åô„Çã„Åæ„Åà„Å´pnpm install„ÇíÂÆüË°å„Åó„Å¶„Åó„Åæ„ÅÑ„Åå„Å°„ÄÇÂøÖ„ÅöÂØæË±°„ÅÆ„Éï„Ç©„É´„ÉÄ„Å´ÁßªÂãï„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ<br />
   „ÇÑ„Å£„Å¶„Åó„Åæ„Å£„ÅüÂ†¥Âêà„ÅØ„ÄÅÂâäÈô§„Åó„Å¶„Åã„Çâ„ÇÑ„ÇäÁõ¥„Åô„ÅÆ„Åå‰∏ÄÁï™Á∞°Âçò„ÄÇ<br />
   Âèà„ÅØ„ÄÅÂá∫Êù•‰∏ä„Åå„Å£„Åü„Éï„Ç°„Ç§„É´„Çíllm-json-reader„Éï„Ç©„É´„ÉÄÂÜÖ„Å´ÁßªÂãï„ÄÇÔºâ

3. ÈñãÁô∫„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï„Åó„Åæ„Åô„ÄÇ

```bash
pnpm dev
```

4. „Éñ„É©„Ç¶„Ç∂„Åß`http://localhost:3000`„ÇíÈñã„Åç„Åæ„Åô„ÄÇ
   <br />

5. „Éï„Ç°„Ç§„É´Ë™≠Ëæº„Éú„Çø„É≥„Åã„Çâ„ÄÅË™≠„ÅøËæº„Åø„Åü„ÅÑJSON„Éá„Éº„Çø„Å™„Å©„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ<br />
6. ÂØæÂøú„Éá„Éº„ÇøÈ†ÜÊ¨°Êõ¥Êñ∞‰∏≠„ÄÇ

### ‰ΩøÁî®ÊäÄË°ì

- Next.js (App RouterÔºö‰Ωø„Å£„Å¶„Åø„Åü„Åã„Å£„Åü)
- TypeScriptÔºàÂûãÂÆâÂÖ®Ôºö„Ç¢„Éó„É™„ÅÆ„Éê„Ç∞„ÇíÈò≤„Åê„Åü„ÇÅ„ÅÆ‰ªïÁµÑ„ÅøÔºâ
- Tailwind CSSÔºà„Éá„Ç∂„Ç§„É≥Ôºö„Éá„Ç∂„Ç§„É≥Ôºâ
- RecoilÔºàÁä∂ÊÖãÁÆ°ÁêÜÔºöÂ§âÊï∞„Çí„ÅÜ„Åæ„Åè‰Ωø„ÅÜÔºâ
- ESLintÔºàÈùôÁöÑÊ§úË®º„ÉÑ„Éº„É´Ôºö„Ç≥„Éº„Éâ„ÅÆ„Ç®„É©„ÉºÊ§úÂá∫Ôºâ
- PrettierÔºà„Ç≥„Éº„Éâ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºö„Ç≥„Éº„ÉâÊï¥ÂΩ¢Ôºâ
- pnpmÔºà„Éë„ÉÉ„Ç±„Éº„Ç∏ÁÆ°ÁêÜÔºö„Ç¢„Éó„É™„Å´‰Ωø„ÅÜ„É©„Ç§„Éñ„É©„É™„Éº„ÅÆÁÆ°ÁêÜÔºâ
- gulpÔºà„Çø„Çπ„ÇØ„É©„É≥„Éä„ÉºÔºö„Ç≥„É≥„Éë„Ç§„É´„ÇÑÂúßÁ∏Æ„Å™„Å©„ÅÆËá™ÂãïÂåñÔºâ

#### ÂæåÊó•ËøΩÂä†‰∫àÂÆöÔºàÂøÖË¶Å„Å´„Å™„Çå„Å∞

- „É©„Ç§„Éà„É¢„Éº„Éâ„ÄÅ„ÉÄ„Éº„ÇØ„É¢„Éº„Éâ„ÅÆ„Åª„Åã„Å´„Ç´„Çπ„Çø„É†„ÉÜ„Éº„ÉûÔºà„ÇÑ„Å£„Å±„Çä‰∏çÂøÖË¶Å„Å´ÊÑü„Åò„Åü„Åü„ÇÅ„ÄÅ‰∏ÄÂ∫¶ÂâäÈô§Ôºâ
- „ÉÜ„Ç≠„Çπ„Éà„ÅÆÈï∑„Åï„Å´Âêà„Çè„Åõ„ÅüÁßíÊï∞Ë°®Á§∫„É¢„Éº„ÉâÔºàÂæÆË™øÊï¥‰∏≠Ôºâ
- SQLite (Â∞ÜÊù•ÁöÑ„Å´„ÅØPostgreSQL„Å∏„ÅÆÁßªË°å„Åã‰ΩµÁî®„ÇíÊÉ≥ÂÆö)
- Storybook

### Features (ËøΩÂä†Ê©üËÉΩ)

- [ ] XMLÂΩ¢ÂºèÂØæÂøú
- [ ] „Éá„Éº„Çø„Éô„Éº„Çπ„Å®ÈÄ£Êê∫„Åó„ÄÅ‰Ωï„Çâ„Åã„ÅÆÊ©üËÉΩ
- [ ] „Ç¢„Éó„É™‰ΩøÁî®ËÄÖ„ÅÆTTS„Å®ÈÄ£Êê∫„Åó„ÅüÈü≥Â£∞Âá∫Âäõ„É¢„Éº„Éâ
- [ ] MQTT„ÄÅÂèà„ÅØgRPC„Çí‰ΩøÁî®„Åó„Åü„Çπ„Éû„Éõ„Åã„Çâ„ÅÆÊìç‰Ωú

## AI„Åã„Çâ„ÅÆÊ©üËÉΩË¶ÅÊúõ„É™„Çπ„ÉàÔºàÊ§úË®é‰∏≠

~~1. JSON„Åä„Çà„Å≥JSONLÂΩ¢Âºè„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å®Ë°®Á§∫~~<br />
2. Ë§áÊï∞„ÅÆJSON„Éï„Ç°„Ç§„É´„ÅÆÁµ±ÂêàË°®Á§∫<br />
3. JSON„Éá„Éº„Çø„ÅÆCSV„Åä„Çà„Å≥Excel„Éï„Ç°„Ç§„É´„Å∏„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„Éà<br />
4. JSON„Éá„Éº„Çø„ÅÆ„Ç∞„É©„Éï„Ç£„Ç´„É´„Å™ÂèØË¶ñÂåñÔºàÊ£í„Ç∞„É©„Éï„ÄÅÂÜÜ„Ç∞„É©„Éï„ÄÅÊäò„ÇåÁ∑ö„Ç∞„É©„Éï„Å™„Å©Ôºâ<br />
5. JSON„Éá„Éº„ÇøÂÜÖ„ÅÆÁâπÂÆö„ÅÆ„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢<br />
6. JSON„Éá„Éº„Çø„ÅÆ„ÇΩ„Éº„ÉàÔºàÁâπÂÆö„ÅÆ„Ç≠„Éº„ÇíÂü∫Ê∫ñ„Å´ÊòáÈ†Ü„Åæ„Åü„ÅØÈôçÈ†ÜÔºâ<br />
7. JSON„Éá„Éº„Çø„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞ÔºàÁâπÂÆö„ÅÆÊù°‰ª∂„ÇíÊ∫Ä„Åü„Åô„Éá„Éº„Çø„ÅÆ„ÅøË°®Á§∫Ôºâ<br />
8. JSON„Éá„Éº„Çø„ÅÆÁ∑®ÈõÜÔºàÂÄ§„ÅÆÂ§âÊõ¥„ÄÅË¶ÅÁ¥†„ÅÆËøΩÂä†„ÉªÂâäÈô§„Å™„Å©Ôºâ<br />
9. JSON„Éá„Éº„Çø„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥Ôºà„Éá„Éº„Çø„ÅÆÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØÔºâ<br />
10. JSON„Éá„Éº„Çø„ÅÆ„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜÔºàÂ§âÊõ¥Â±•Ê≠¥„ÅÆËøΩË∑°„ÄÅÁâπÂÆö„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„Å∏„ÅÆÂæ©ÂÖÉ„Å™„Å©Ôºâ<br />
11. „É¶„Éº„Ç∂„ÉºË™çË®º„Å®„Ç¢„ÇØ„Çª„ÇπÂà∂Âæ°Ôºà„É≠„Ç∞„Ç§„É≥„ÄÅ„É≠„Éº„É´Âà•„ÅÆ„Ç¢„ÇØ„Çª„ÇπÂà∂Èôê„Å™„Å©Ôºâ

## Ë≤¢ÁåÆ

"„Éó„É´„É™„ÇØ„Ç®„Çπ„Éà„ÅØÊ≠ìËøé„Åó„Åæ„Åô„ÄÇ<br />„Åæ„ÅöIssue„ÇíÈñã„ÅÑ„Å¶Â§âÊõ¥ÂÜÖÂÆπ„Å´„Å§„ÅÑ„Å¶Ë≠∞Ë´ñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"

Github„ÅÆÂÖ±ÂêåÈñãÁô∫ÁµåÈ®ì„Åå‰∏çÂçÅÂàÜ„Å™„Åü„ÇÅ„ÄÅ„Å©„ÅÆ„Çà„ÅÜ„Å´‰ªñ‰∫∫„Å®„ÅÆÊõ¥Êñ∞„Çí„Åó„Å¶„ÇÜ„Åë„Å∞„Çà„ÅÑ„Åã„Å™„Å©„ÅÆÁµåÈ®ì„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ<br />
Ë¶ÅÊúõ„ÅØIssue„Å´„Å¶È†Ç„Åç„ÄÅÊöñ„Åã„ÅèË¶ãÂÆà„Å£„Å¶È†Ç„Åë„Çå„Å∞Âπ∏„ÅÑ„Åß„Åô„ÄÇ

## „É©„Ç§„Çª„É≥„Çπ

[MIT](https://choosealicense.com/licenses/mit/)

Èñ≤Ë¶ßÁî®„ÅÆ„Éá„Éº„Çø„Çª„ÉÉ„Éà„ÅØ„ÄÅ„Éá„Éº„ÇøÂÖÉ„ÅÆ„É©„Ç§„Çª„É≥„Çπ„Å´Ê∫ñ„Åò„Åæ„Åô„ÄÇ

```

### state\atmos\autoModeAtom.ts

```
import { atom } from 'recoil';

export type AutoModeSpeed = 'off' | '3s' | '5s' | '10s' | 'custom' | 'textLength';

export const autoModeSpeedAtom = atom<AutoModeSpeed>({
  key: 'autoModeSpeed',
  default: 'off',
});

export const customSpeedAtom = atom<number>({
  key: 'customSpeed',
  default: 0,
});

```

### state\atmos\fileNameAtom.ts

```
import { atom } from 'recoil';

export const fileNameAtom = atom<string>({
  key: 'fileName',
  default: '',
});

```

### state\atmos\fontSizeAtoms.ts

```
import { atom } from 'recoil';

export const fontSizeAtom = atom<number>({
  key: 'fontSize',
  default: 16, // „Éá„Éï„Ç©„É´„Éà„ÅÆ„Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫„ÇíË®≠ÂÆö
});

```

### state\atmos\jsonDataAtom.ts

```
import { atom } from 'recoil';
export interface JsonData {
  ID: string;
  instruction: string;
  input: string;
  output: string;
  text: string;
}

export const jsonDataAtom = atom<JsonData[]>({
  key: 'jsonData',
  default: [],
});

export const indexAtom = atom({
  key: 'index',
  default: 0,
});

```

### state\atmos\themeAtom.ts

```
import { atom } from 'recoil';
import { ThemeColors } from '@/styles/themeColorPalette';

export type ThemeMode = 'light' | 'dark' | 'custom1' | 'custom2' | 'custom3' | 'custom4' | 'custom5' | 'custom6';

export const themeAtom = atom<ThemeMode>({
  key: 'themeAtom',
  default: 'light',
});

export const originalColors = {
  name: 'Ocean',
  header: '#2c3e50',
  sidebar: '#34495e',
  sidebarSelected: '#2980b9',
  sidebarHover: '#ced4da',
  main: '#ecf0f1',
  footer: '#34495e',
  text: '#E6E6E6',
  link: '#3498db',
  headerText: '#FFFFFF', // ÁôΩËâ≤
  footerText: '#FFFFFF', // ÁôΩËâ≤
  mainText: '#333333', // Êöó„ÅÑ„Ç∞„É¨„Éº
  sidebarText: '#FFFFFF', // ÁôΩËâ≤
};

export const trendyColors1 = {
  name: 'TikTok Marketing Partners',
  header: '#000000',
  sidebar: '#74f0ed',
  sidebarSelected: '#ea445a',
  sidebarHover: '#ced4da',
  main: '#ffffff',
  footer: '#000000',
  text: '#E6E6E6',
  link: '#EA445A',
  headerText: '#FFFFFF', // ÁôΩËâ≤
  footerText: '#FFFFFF', // ÁôΩËâ≤
  mainText: '#333333', // Êöó„ÅÑ„Ç∞„É¨„Éº
  sidebarText: '#333333', // Êöó„ÅÑ„Ç∞„É¨„Éº
};

export const trendyColors2 = {
  name: 'Bold by Nature',
  header: '#172d13',
  sidebar: '#A0522D',
  sidebarSelected: '#6bb77b',
  sidebarHover: '#ced4da',
  main: '#ffffff',
  footer: '#172d13',
  text: '#ffffff',
  link: '#d76f30',
  headerText: '#FFFFFF', // ÁôΩËâ≤
  footerText: '#FFFFFF', // ÁôΩËâ≤
  mainText: '#333333', // Êöó„ÅÑ„Ç∞„É¨„Éº
  sidebarText: '#333333', // Êöó„ÅÑ„Ç∞„É¨„Éº
};

export const trendyColors3 = {
  name: 'Amour',
  header: '#5ac3b0',
  sidebar: '#de5935',
  sidebarSelected: '#f7cd46',
  sidebarHover: '#ced4da',
  main: '#ffffff',
  footer: '#5ac3b0',
  text: '#333333',
  link: '#de5935',
  headerText: '#FFFFFF', // ÁôΩËâ≤
  footerText: '#FFFFFF', // ÁôΩËâ≤
  mainText: '#333333', // Êöó„ÅÑ„Ç∞„É¨„Éº
  sidebarText: '#333333', // Êöó„ÅÑ„Ç∞„É¨„Éº
};

export const trendyColors4 = {
  name: 'The Authentic Brief',
  header: '#B2A489',
  sidebar: '#5ebec4',
  sidebarSelected: '#f92c85',
  sidebarHover: '#ced4da',
  main: '#ffffff',
  footer: '#B2A489',
  text: '#2c3e50',
  link: '#5ebec4',
  headerText: '#FFFFFF', // ÁôΩËâ≤
  footerText: '#FFFFFF', // ÁôΩËâ≤
  mainText: '#333333', // Êöó„ÅÑ„Ç∞„É¨„Éº
  sidebarText: '#333333', // Êöó„ÅÑ„Ç∞„É¨„Éº
};

export const trendyColors5 = {
  name: '70s Inspired',
  header: '#101357',
  sidebar: '#fea49f',
  sidebarSelected: '#fbaf08',
  sidebarHover: '#ced4da',
  main: '#ffffff',
  footer: '#101357',
  text: '#000000',
  link: '#fea49f',
  headerText: '#FFFFFF', // ÁôΩËâ≤
  footerText: '#FFFFFF', // ÁôΩËâ≤
  mainText: '#333333', // Êöó„ÅÑ„Ç∞„É¨„Éº
  sidebarText: '#333333', // Êöó„ÅÑ„Ç∞„É¨„Éº
};

export const customThemeColorsAtom = atom<ThemeColors[]>({
  key: 'customThemeColorsAtom',
  default: [originalColors, trendyColors1, trendyColors2, trendyColors3, trendyColors4, trendyColors5],
});

```

### state\FileUploader.tsx

```
import { useRef, useState, useEffect } from 'react';
import { useRecoilState, useSetRecoilState } from 'recoil';

import { fileNameAtom } from '@/state/atmos/fileNameAtom';
import { JsonData, indexAtom, jsonDataAtom } from '@/state/atmos/jsonDataAtom';
import { parseJsonData } from '@/lib/utils/helpers/helpers';
import Button from '@/components/atoms/Button/Button';

const FileUploader = () => {
  const setJsonData = useSetRecoilState(jsonDataAtom);
  const setFileName = useSetRecoilState(fileNameAtom); // setFileName„ÇíÂèñÂæó
  const [index, setIndex] = useRecoilState(indexAtom);

  const [isFileLoaded, setIsFileLoaded] = useState(false);

  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleLoadJsonFile = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  useEffect(() => {
    // „Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„ÅøÂÆå‰∫ÜÊôÇ„Å´„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Çí„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åô„Çã
  }, [isFileLoaded]);

  const [errorMessage, setErrorMessage] = useState('');

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const fileReader = new FileReader();

    if (event.target.files?.length) {
      const file = event.target.files[0];
      setFileName(file.name);

      fileReader.readAsText(file);
      fileReader.onload = () => {
        try {
          // „Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíJSONÂΩ¢Âºè„Å´Â§âÊèõ
          const content = fileReader.result as string;
          const jsonData: JsonData[] = parseJsonData(content);

          if (jsonData.length > 0) {
            setIndex(0);
            setJsonData(jsonData);
            setIsFileLoaded(true);
            setErrorMessage('');
          } else {
            setErrorMessage('„Éï„Ç°„Ç§„É´„ÅåÂØæÂøú„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇÊúüÂæÖ„Åï„Çå„ÇãÂΩ¢Âºè„ÅÆJSON„Åæ„Åü„ÅØJSONL„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
          }
        } catch (error) {
          console.error('„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ', error);
          setErrorMessage('„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÊúâÂäπ„Å™JSON„Åæ„Åü„ÅØJSONL„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
        }
      };
    }
  };

  return (
    <div>
      <Button onClick={handleLoadJsonFile}>
        „Éï„Ç°„Ç§„É´Ë™≠Ëæº
      </Button>
      <input
        type="file"
        accept=".json,.jsonl"
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
      {errorMessage && <p className="text-red-500">{errorMessage}</p>}
    </div>
  );
};

export default FileUploader;

```

### state\JsonPaginator.tsx

```
import { indexAtom, jsonDataAtom } from '@/state/atmos/jsonDataAtom';
import { useRecoilState } from 'recoil';

const JsonPaginator = () => {
  const [jsonData, setJsonData] = useRecoilState(jsonDataAtom);
  const [index, setIndex] = useRecoilState(indexAtom);

  // Ê¨°„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
  const showNextItems = () => {
    if (index + 1 < jsonData.length) {
      setIndex(index + 1);
    }
  };

  // Ââç„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
  const showPreviousItems = () => {
    if (index - 1 >= 0) {
      setIndex(index - 1);
    }
  };

  return (
    <div>
      {jsonData && jsonData.length > 0 ? (<button onClick={showPreviousItems} disabled={index === 0}>Ââç„Å∏</button>): null}
      {jsonData && jsonData.length > 0 ? (<button onClick={showNextItems} disabled={index + 1 >= jsonData.length}>Ê¨°„Å∏</button>): null }
    </div>
  );
};

export default JsonPaginator;
```

### styles\globals.css

```
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --text-color: #000;
  --bg-color: #fff;
}

.dark {
  --text-color: #fff;
  --bg-color: #000;
}

body {
  color: var(--text-color);
  background-color: var(--bg-color);
  font-family: 'Hiragino Kaku Gothic ProN', '„Éí„É©„ÇÆ„ÉéËßí„Ç¥ ProN W3', Meiryo, „É°„Ç§„É™„Ç™, Osaka, 'MS PGothic', arial, helvetica, sans-serif;
}

.remaining-seconds {
  white-space: nowrap;
}

.remaining-seconds.empty::before {
  content: "0.0Áßí";
  visibility: hidden;
}

```

### styles\themeColorPalette.ts

```
export interface ThemeColors {
  name: string;
  header: string;
  headerText: string;
  sidebar: string;
  sidebarText: string;
  sidebarSelected: string;
  sidebarHover: string;
  main: string;
  mainText: string;
  footer: string;
  footerText: string;
  text: string;
  link: string;
}


// light „ÉÜ„Éº„Éû„Ç´„É©„Éº
export const lightColors = {
  header: '#f8f9fa',
  headerText: '#333333',
  sidebar: '#e9ecef',
  sidebarText: '#333333',
  sidebarSelected: '#dee2e6',
  sidebarHover: '#ced4da',
  main: '#ffffff',
  mainText: '#333333',
  footer: '#dee2e6',
  footerText: '#333333',
  text: '#212529',
  link: '#007bff',
};

// dark „ÉÜ„Éº„Éû„Ç´„É©„Éº
export const darkColors = {
  header: '#343a40',
  headerText: '#f8f9fa',
  sidebar: '#495057',
  sidebarText: '#f8f9fa',
  sidebarSelected: '#6c757d',
  sidebarHover: '#ced4da',
  main: '#212529',
  mainText: '#f8f9fa',
  footer: '#343a40',
  footerText: '#f8f9fa',
  text: '#f8f9fa',
  link: '#00d4ff',
};

```

### tailwind.config.ts

```
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
      colors: {
        'light-text': '#000',
        'dark-text': '#fff',
      },
    },
  },
  plugins: [],
  darkMode: 'class'
};
export default config;

```

### tsconfig.json

```
{
  "compilerOptions": {
    "target": "esnext",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "dist/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

```

