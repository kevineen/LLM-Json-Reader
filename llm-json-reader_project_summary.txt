# llm-json-reader

## Directory Structure

- llm-json-reader/
  - .editorconfig
  - .eslintignore
  - .eslintrc.json
  - .prettierignore
  - .prettierrc
  - .storybook/
    - main.ts
    - preview.js
  - .vscode/
    - settings.json
  - app/
    - about/
      - page.tsx
    - favicon.ico (binary file)
    - globals.css
    - layout.tsx
    - page.tsx
  - components/
    - atoms/
      - ArrowButton/
        - ArrowButton.tsx
        - index.ts
      - Button/
        - Button.tsx
        - index.ts
      - FileUploadButton/
        - FileUploadButton.tsx
        - index.ts
      - LinkButton/
        - index.ts
        - LinkButton.tsx
      - ThemeIcon/
        - index.ts
        - ThemeIcon.tsx
    - molecules/
      - Card/
        - Card.tsx
        - index.ts
      - MainCard/
        - index.ts
        - MainCard.tsx
      - SideAccordionItem/
        - index.ts
        - SideAccordionItem.tsx
      - SubCard/
        - index.ts
        - SubCard.tsx
      - ThemeSelector/
        - index.ts
        - ThemeSelector.tsx
      - ThemeToggle/
        - index.ts
        - ThemeToggle.tsx
    - organisms/
      - JsonCardViewer/
        - index.ts
        - JsonCardViewer.tsx
      - SideAccordion/
        - index.ts
        - SideAccordion.tsx
    - providers/
      - MainProvider/
        - index.ts
        - MainProvider.tsx
    - template/
      - JsonMainView/
        - index.ts
        - JsonMainView.tsx
      - JsonReadLayout/
        - index.ts
        - JsonReadLayout.tsx
      - MainLayout/
        - index.ts
        - MainLayout.tsx
      - Sidebar/
        - index.ts
        - Sidebar.tsx
  - data/
    - 1.2.0/
    - evalDatasetlist.csv
  - dist/
  - hooks/
    - useFileUpload.ts
  - lib/
    - db.ts
    - declarations/
    - env/
      - env.mjs
      - index.ts
    - utils/
      - cn/
        - cn.ts
        - index.ts
      - helpers/
        - countOccurrences.ts
        - helpers.ts
        - index.tx
  - log_file.log
  - next.config.mjs
  - package.json
  - pnpm-lock.yaml
  - postcss.config.js
  - public/
    - next.svg
    - vercel.svg
  - README.md
  - state/
    - atmos/
      - jsonDataAtom.ts
      - themeAtom.ts
    - FileUploader.tsx
    - JsonPaginator.tsx
    - selectors/
      - currentThemeColorsSelector.ts
      - filteredDataSelector.ts
  - styles/
    - globals.css
    - themeColorPalette.ts
  - tailwind.config.ts
  - tsconfig.json

## File Contents

### .editorconfig

```
# http://editorconfig.org
root = true

[*]
charset = utf-8
end_of_line = lf
indent_style = space
indent_size = 2
trim_trailing_whitespace = true
insert_final_newline = true

[*.{md,markdown}]
trim_trailing_whitespace = false
```

### .eslintignore

```
node_modules/
.next/
.nuxt/
.astro/
build/
dist/
out/
public/
package-lock.json
yarn.lock
pnpm-lock.yaml
vite.config.ts
next.config.js
tsconfig.json
src/env.d.ts
*.cjs
*.mjs
```

### .eslintrc.json

```
{
  "extends": [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended",
    "plugin:tailwindcss/recommended",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "rules": {
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports",
        "fixStyle": "separate-type-imports"
      }
    ],
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],
    "object-shorthand": "error",
    "tailwindcss/no-custom-classname": "off",
    "react/jsx-curly-brace-presence": "error",
    "react/self-closing-comp": [
      "error",
      {
        "component": true,
        "html": false
      }
    ],
    "@next/next/no-img-element": "off",
  }
}
```

### .prettierignore

```
node_modules/
.next/
.nuxt/
.astro/
build/
dist/
out/
public/
package-lock.json
yarn.lock
pnpm-lock.yaml
next.config.js
```

### .prettierrc

```
{
    "trailingComma": "all",
    "tabWidth": 2,
    "useTabs": false,
    "semi": false,
    "singleQuote": true,
    "jsxSingleQuote": false,
    "arrowParens": "always",
    "printWidth": 80,
    "bracketSpacing": true,
    "plugins": ["prettier-plugin-organize-imports"],
    "overrides": [
      {
        "files": "*.html",
        "options": {
          "printWidth": 360
        }
      },
      {
        "files": ["*.css", "*.scss"],
        "options": {
          "singleQuote": false
        }
      }
    ]
  }
```

### .storybook\main.ts

```
import { StorybookConfig } from '@storybook/nextjs';

const config: StorybookConfig = {
  // ...
  framework: '@storybook/nextjs',
};

export default config;

```

### .storybook\preview.js

```
export const parameters = {
  // ...
  darkMode: {
    darkClass: 'dark',
    stylePreview: true,
  },
};

```

### .vscode\settings.json

```
{
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.formatOnSave": true,
  "editor.formatOnPaste": true,
  "editor.codeActionsOnSave": {
    "source.addMissingImports": "explicit",
    "source.fixAll.eslint": "explicit",
  },
  "javascript.preferences.importModuleSpecifier": "non-relative",
  "typescript.preferences.importModuleSpecifier": "non-relative",
  "eslint.validate": [
    "html",
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "[typescript]": {
    "editor.tabSize": 2
  },
  "[scss]": {
    "editor.tabSize": 2
  },
}

```

### app\about\page.tsx

```
// `app/page.tsx` is the UI for the `/` URL
export default function About() {
  const featuresItems = [{ icon: 'üèéÔ∏è', name: 'XMLÂØæÂøú' }];

  return (
    <div>
    <section className="bg-white px-4 dark:bg-gray-900">
      <div className="mx-auto grid max-w-screen-xl px-4 py-4 text-center lg:py-2">
        <div className="mx-auto place-self-center">
          <h1 className="mb-4 max-w-2xl text-4xl font-extrabold leading-none tracking-tight dark:text-white md:text-5xl xl:text-2xl">
            Json Reader for LLM Dataset
            <br /> (Large Language Models)
          </h1>
          <p className="mb-6 max-w-2xl font-light text-gray-500 dark:text-gray-400 md:text-lg lg:mb-8 lg:text-md">
            LLMÈñãÁô∫Áî®„Å´„ÄÅjson„ÉªjsonlÂΩ¢Âºè„Åß„ÅÇ„Çã„Éá„Éº„Çø„Çª„ÉÉ„Éà„ÇíÈñ≤Ë¶ßË¶ã„Çã„Åü„ÇÅ„ÅÆ„Ç¢„Éó„É™„Åß„Åô„ÄÇ
          </p>
        </div>
      </div>
    </section>
    <h2 className="text-bold mt-8 mb-10 text-3xl">üöÄ Features:</h2>
      <ul className="grid grid-cols-1 grid-rows-1 md:grid-cols-2 gap-4 lg:grid-cols-4">
        {featuresItems.map(({ icon, name }) => (
          <li
            key={name}
            className="flex flex-col text-center items-center hover:scale-105 transition-all hover:shadow-xl duration-300 justify-center gap-2 px-4 py-6 border rounded-lg shadow"
          >
            <span className="text-xl">{icon}</span>
            <span>{name}</span>
          </li>
        ))}
      </ul>
      </div>
    );
};
```

### app\globals.css

```
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

```

### app\layout.tsx

```
'use client';

import { Inter } from "next/font/google";
import "./globals.css";

import React from "react";
import { RecoilRoot } from 'recoil';
import { MainProvider } from "@/components/providers/MainProvider"; import { MainLayout } from "@/components/template/MainLayout";
const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "LLM-Json-Reader",
//   description: "Json„Éï„Ç°„Ç§„É´„ÇíË™≠„ÇÄ„Å†„Åë„ÅÆÁâ©",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="ja">
      <body className={inter.className}>
        <RecoilRoot>
          <MainProvider>
            <MainLayout>{children}</MainLayout>
          </MainProvider>
        </RecoilRoot>
      </body>
    </html>
  );
}

```

### app\page.tsx

```
'use client';

import JsonMainView from "@/components/template/JsonMainView/JsonMainView";
import JsonReadLayout from "@/components/template/JsonReadLayout/JsonReadLayout";

const HomePage = () => {

  return (
    <div>
      <JsonReadLayout>
        <JsonMainView />
      </JsonReadLayout>
    </div>
  )
};

export default HomePage;
```

### components\atoms\ArrowButton\ArrowButton.tsx

```
import React from 'react';

interface ArrowButtonProps {
  onClick?: () => void;
  disabled?: boolean;
  direction: 'left' | 'right';
}

export default function ArrowButton({ onClick, disabled, direction }: ArrowButtonProps) {
  const arrowIcon = direction === 'left' ? '‚Üê' : '‚Üí';

  return (
    <button
      className="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-1 px-2 rounded"
      onClick={onClick}
      disabled={disabled}
    >
      {arrowIcon}
    </button>
  );
}
```

### components\atoms\ArrowButton\index.ts

```
export * from './ArrowButton';

```

### components\atoms\Button\Button.tsx

```
import React from 'react';

interface ButtonProps {
  onClick?: () => void;
  disabled?: boolean;
  children: React.ReactNode;
}

export default function Button({ onClick, disabled, children }: ButtonProps) {
  return (
    <button
      className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
      onClick={onClick}
      disabled={disabled}
    >
      {children}
    </button>
  );
}

```

### components\atoms\Button\index.ts

```
export * from './Button';

```

### components\atoms\FileUploadButton\FileUploadButton.tsx

```
// components/atoms/FileUploadButton/FileUploadButton.tsx
import { jsonDataAtom } from '@/state/atmos/jsonDataAtom';
import { useSetRecoilState } from 'recoil';

const FileUploadButton = () => {
  const setJsonData = useSetRecoilState(jsonDataAtom);

  const handleUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const fileReader = new FileReader();

    if (event.target.files?.length) {
      const file = event.target.files[0];

      fileReader.readAsText(file);
      fileReader.onload = () => {
        try {
          const content = fileReader.result as string;

          if (!content.trim()) {
            console.error('Empty JSON file.');
            return;
          }

          let jsonData = JSON.parse(content);

          if (Array.isArray(jsonData)) {
            // JSON„Éá„Éº„Çø„ÅåÈÖçÂàó„ÅÆÂ†¥Âêà„ÄÅ„Éê„ÉÉ„ÇØ„Çπ„É©„ÉÉ„Ç∑„É•„Çí„Ç®„Çπ„Ç±„Éº„Éó„Åô„Çã
            const escapedContent = content.replace(/\\/g, '\\\\');
            jsonData = JSON.parse(escapedContent);
            setJsonData(jsonData);
          } else {
            console.error('Invalid file format. Expected an array of objects.');
          }
        } catch (error) {
          if (error instanceof SyntaxError) {
            console.error('Invalid JSON syntax:', error.message);
          } else {
            console.error('Error parsing JSON file:', error);
          }
        }
      };
    }
  };

  return (
    <div>
      <input type="file" onChange={handleUpload} accept=".json" title="JSON„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" />
    </div>
  );
};

export default FileUploadButton;

```

### components\atoms\FileUploadButton\index.ts

```
export * from './FileUploadButton';

```

### components\atoms\LinkButton\index.ts

```
export * from './LinkButton';

```

### components\atoms\LinkButton\LinkButton.tsx

```
// components/atoms/LinkButton.tsx
import Link from 'next/link';
import React from 'react';

interface LinkButtonProps {
  href: string;
  label: string;
}

const LinkButton: React.FC<LinkButtonProps> = ({ href, label }) => <Link href={href}>{label}</Link>;

export default LinkButton;

```

### components\atoms\ThemeIcon\index.ts

```
export * from './ThemeIcon';

```

### components\atoms\ThemeIcon\ThemeIcon.tsx

```
import React from 'react';

interface ThemeIconProps {
  theme: 'light' | 'dark';
}

const SunIcon: React.FC = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
    <path d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z" />
  </svg>
);

const MoonIcon: React.FC = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
    <path fillRule="evenodd" d="M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.69.75.75 0 01.981.98 10.503 10.503 0 01-9.694 6.46c-5.799 0-10.5-4.701-10.5-10.5 0-4.368 2.667-8.112 6.46-9.694a.75.75 0 01.818.162z" clipRule="evenodd" />
  </svg>
);

const ThemeIcon: React.FC<ThemeIconProps> = ({ theme }) => (
  theme === 'light' ? <MoonIcon /> : <SunIcon />
);

export default ThemeIcon;

```

### components\molecules\Card\Card.tsx

```
import React from 'react';

interface CardProps {
  title: string;
  content?: string;
  displayMode: 'selected' | 'prev' | 'next';
  onClick?: () => void;
}

export default function Card({ title, content = '', displayMode, onClick }: CardProps) {
  const maxHeightClass = displayMode === 'selected' ? '' : 'max-h-40';
  const preClass = displayMode === 'selected' ? 'whitespace-pre-wrap break-words' : 'overflow-auto whitespace-pre-wrap';

  return (
    <div
      className={`bg-gray-100 border border-gray-300 rounded-lg p-4 shadow-md overflow-hidden cursor-pointer hover:bg-gray-200 transition-colors duration-300 ${maxHeightClass}`}
      onClick={onClick}
    >
      <h3 className="text-xl font-bold mb-2 text-gray-800">{title}</h3>
      <pre className={`text-sm text-gray-700 ${preClass}`}>
        {displayMode === 'selected'
          ? content || '„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„Åß„Åè„Å†„Åï„ÅÑ'
          : content
          ? `${content.slice(0, 100)}...`
          : '„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Çì„Åß„Åè„Å†„Åï„ÅÑ'}
      </pre>
    </div>
  );
}
```

### components\molecules\Card\index.ts

```
export * from "./Card";
```

### components\molecules\MainCard\index.ts

```
export * from "./MainCard";
```

### components\molecules\MainCard\MainCard.tsx

```
const MainCard = ({ children }: any) => {
  return (
    <div className="card">
      {children}
    </div>
  );
};

export default MainCard;
```

### components\molecules\SideAccordionItem\index.ts

```
export * from "./SideAccordionItem";
```

### components\molecules\SideAccordionItem\SideAccordionItem.tsx

```
import { useRecoilState } from "recoil";
import { indexAtom } from "@/state/atmos/jsonDataAtom";

const SideAccordionItem = ({ children }: any) => {
  const [index, setIndex] = useRecoilState(indexAtom);

  return (
    <div onClick={() => setIndex(index)}>
      <div>Index: {index}</div>
      <div>Category: {children.category}</div>
    </div>
  );
};

export default SideAccordionItem;
```

### components\molecules\SubCard\index.ts

```
export * from "./SubCard";
```

### components\molecules\SubCard\SubCard.tsx

```
const SubCard = ({ children }: any) => {
  return (
    <div className="card">
      {children}
    </div>
  );
};

export default SubCard;
```

### components\molecules\ThemeSelector\index.ts

```
export * from "./ThemeSelector";

```

### components\molecules\ThemeSelector\ThemeSelector.tsx

```
import { useRecoilState } from 'recoil';
import { originalColors } from '@/styles/themeColorPalette';
import { themeAtom, ThemeMode } from '@/state/atmos/themeAtom';

const ThemeSelector = () => {
  const [theme, setTheme] = useRecoilState(themeAtom);

  const handleThemeChange = (selectedTheme: ThemeMode) => {
    setTheme(selectedTheme);
  };

  return (
    <div>
      <button onClick={() => handleThemeChange('light')}>Light</button>
      <button onClick={() => handleThemeChange('dark')}>Dark</button>
      {originalColors.map((color, index) => (
        <button key={color.name} onClick={() => handleThemeChange(`original${index}` as ThemeMode)}>
          {color.name}
        </button>
      ))}
    </div>
  );
};

export default ThemeSelector;

```

### components\molecules\ThemeToggle\index.ts

```
export * from "./ThemeToggle";

```

### components\molecules\ThemeToggle\ThemeToggle.tsx

```
import { useRecoilState, useRecoilValue } from 'recoil';
import ThemeIcon from '@/components/atoms/ThemeIcon/ThemeIcon';
import { themeAtom } from '@/state/atmos/themeAtom';
import { currentThemeColorsSelector } from '@/state/selectors/currentThemeColorsSelector';


const ThemeToggle = () => {
  const [theme, setTheme] = useRecoilState(themeAtom);

  const toggleTheme = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

  const themeColors = useRecoilValue(currentThemeColorsSelector);

  return (
    <div>
      <button onClick={toggleTheme}>
        <ThemeIcon theme={theme} />
      </button>
      <button onClick={() => toggleOtherThemes('original')}>„Ç™„É™„Ç∏„Éä„É´„ÉÜ„Éº„Éû„Å´Âàá„ÇäÊõø„Åà</button>
      <button onClick={() => toggleOtherThemes('trendy1')}>„Éà„É¨„É≥„Éá„Ç£1„Å´Âàá„ÇäÊõø„Åà</button>
    </div>
  );
};



export default ThemeToggle;

```

### components\organisms\JsonCardViewer\index.ts

```
export * from './JsonCardViewer';

```

### components\organisms\JsonCardViewer\JsonCardViewer.tsx

```
import { useRecoilState, useRecoilValue } from 'recoil';

import { jsonDataAtom, indexAtom } from '@/state/atmos/jsonDataAtom';
import { useCallback, useEffect } from 'react';
import React from 'react';

const JsonCardViewer = () => {
  const [jsonData, setJsonData] = useRecoilState(jsonDataAtom);
  const [index, setIndex] = useRecoilState(indexAtom);

  // useCallback„Éï„ÉÉ„ÇØ„ÇíuseEffect„ÅÆÂ§ñ„ÅßÂÆöÁæ©
  const handleArrowKey = useCallback((event: KeyboardEvent) => {
    console.log(index)
    if (event.key === 'ArrowRight') {
      setIndex((index) => Math.min(index + 1, jsonData.length - 1));
    } else if (event.key === 'ArrowLeft') {
      setIndex((index) => Math.max(index - 1, 0));
    }
  }, [index, jsonData.length]);

  useEffect(() => {
    window.addEventListener('keydown', handleArrowKey);
    return () => {
      window.removeEventListener('keydown', handleArrowKey);
    };
  }, [handleArrowKey]); // useCallback„Åß„É°„É¢Âåñ„Åï„Çå„ÅüÈñ¢Êï∞„Çí‰æùÂ≠òÈÖçÂàó„Å´ËøΩÂä†

  const nowCard = (item: any, originalIndex: number) => {
    // ÈÅ∏Êäû‰∏≠„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíË°®Á§∫
    if (originalIndex === index) {
      return (
        <div key={originalIndex.toString()}>
          <div>{JSON.stringify(item, null, 2)}</div>
        </div>
      );
    }
    return null;
  };

  const previousCard = (item: any, originalIndex: number) => {
  // ÈÅ∏Êäû‰∏≠„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅÆ1„Å§Ââç„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíË°®Á§∫
  if (index === 0) {
    // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Åå0„ÅÆÂ†¥Âêà„ÅØ "Start" „ÇíË°®Á§∫
    return (
      <div key={originalIndex}>
        <div>Start</div>
      </div>
    );
  } else if (originalIndex === index - 1) {
    return (
      <div key={originalIndex}>
        <div>Category: {item.category}</div>
        <div>Instruction: {item.instruction}</div>
      </div>
    );
  }
    return null;
  };

const nextCard = (item: any, originalIndex: number) => {
  // ÈÅ∏Êäû‰∏≠„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅÆ1„Å§Âæå„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíË°®Á§∫
  if (originalIndex === jsonData.length) {
    // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅåjsonData„ÅÆÊúÄÂæå„ÅÆË¶ÅÁ¥†„ÅÆÂ†¥Âêà„ÅØ "Last" „ÇíË°®Á§∫
    return (
      <div key={originalIndex}>
        <div>Last</div>
      </div>
    );
  } else if (originalIndex === index + 1) {
    return (
      <div key={originalIndex}>
        <div>Category: {item.category}</div>
        <div>Instruction: {item.instruction}</div>
      </div>
    );
  }
    return null;
  };

  return (
    <div>
      {jsonData && jsonData.length > 0 ? (
        <>
          {previousCard(jsonData[index - 1], index - 1)}
          <div key={index}>
            {/* ÁèæÂú®„ÅÆ„Ç´„Éº„Éâ„ÇíË°®Á§∫ */}
            {nowCard(jsonData[index], index)}
          </div>
          {nextCard(jsonData[index + 1], index + 1)}
        </>
      ) : (
        <div>
          <p>„Éï„Ç°„Ç§„É´„Éá„Éº„Çø„Åå„Åæ„Å†Ë™≠„ÅøËæº„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ<br />
          jsonl„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
        </div>
      )}
    </div>
  );
};

export default JsonCardViewer;
```

### components\organisms\SideAccordion\index.ts

```
export * from './SideAccordion';

```

### components\organisms\SideAccordion\SideAccordion.tsx

```
const SideAccordion = () => {
  return (
    <div>

    </div>
  );
}

export default SideAccordion;
```

### components\providers\MainProvider\index.ts

```
export * from './MainProvider';

```

### components\providers\MainProvider\MainProvider.tsx

```
import { ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

// This is the place responsible for grouping all providers from the app
export const MainProvider = ({ children }: Props) => <>{children}</>;

```

### components\template\JsonMainView\index.ts

```
export * from './JsonMainView';

```

### components\template\JsonMainView\JsonMainView.tsx

```
import { useCallback, useEffect, useRef } from "react";
import { useRecoilState, useRecoilValue } from "recoil";

import { indexAtom, jsonDataAtom } from "@/state/atmos/jsonDataAtom";

import Button from "@/components/atoms/Button/Button";
import Card from "@/components/molecules/Card/Card";
import ArrowButton from "@/components/atoms/ArrowButton/ArrowButton";
import { parseJsonData } from "@/lib/utils/helpers/helpers";

export const JsonMainView = () => {
  const [jsonData, setJsonData] = useRecoilState(jsonDataAtom);

  const [index, setIndex] = useRecoilState(indexAtom);

  const fileInputRef = useRef<HTMLInputElement>(null);

  const handlePrevClick = () => {
    setIndex((prevIndex: number) => Math.max(prevIndex - 1, 0));
  };

  const handleNextClick = () => {
    setIndex((prevIndex: number) => Math.min(prevIndex + 1, jsonData.length - 1));
  };

  // useCallback„Éï„ÉÉ„ÇØ„ÇíuseEffect„ÅÆÂ§ñ„ÅßÂÆöÁæ©
  const handleArrowKey = useCallback((event: KeyboardEvent) => {
    if (event.key === 'ArrowRight') {
      setIndex((prevIndex: number) => Math.min(prevIndex + 1, jsonData.length - 1));
    } else if (event.key === 'ArrowLeft') {
      setIndex((prevIndex: number) => Math.max(prevIndex - 1, 0));
    }
  }, [setIndex, jsonData.length]);

  useEffect(() => {
    window.addEventListener('keydown', handleArrowKey);
    return () => {
      window.removeEventListener('keydown', handleArrowKey);
    };
  }, [handleArrowKey]);

  const handleLoadJsonFile = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const fileReader = new FileReader();

    if (event.target.files?.length) {
      const file = event.target.files[0];

      fileReader.readAsText(file);
      fileReader.onload = () => {
        try {
          const content = fileReader.result as string;
          const jsonData = parseJsonData(content);
          setJsonData(jsonData);
        } catch (error) {
          console.error('„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ', error);
        }
      };
    }
  };

  return (
    <div>
      <div className="mb-4 flex justify-between items-center">
        <div className="w-1/3 flex justify-start">
          <ArrowButton
            direction="left"
            onClick={handlePrevClick}
            disabled={index === 0}
          />
        </div>
        <div className="w-1/3 flex justify-center">
          <Button onClick={handleLoadJsonFile}>
            „Éï„Ç°„Ç§„É´Ë™≠Ëæº
          </Button>
          <input
            type="file"
            accept=".json,.jsonl"
            ref={fileInputRef}
            onChange={handleFileChange}
            style={{ display: 'none' }}
          />
        </div>
        <div className="w-1/3 flex justify-end">
          <ArrowButton
            direction="right"
            onClick={handleNextClick}
            disabled={index === jsonData.length - 1}
          />
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4 mb-4">
        {/* Ââç„ÅÆ„Éá„Éº„Çø„ÇíË°®Á§∫ */}
        <div className="col-span-1">
          {index === 0 ? (
            <Card
              title="ÈñãÂßã‰ΩçÁΩÆ"
              content=""
              displayMode="prev"
            />
          ) : (
            <Card
              title="Previous Data"
              content={JSON.stringify(jsonData[index - 1], null, 2)}
              displayMode="prev"
              onClick={() => setIndex(index - 1)}
            />
          )}
        </div>

        {/* Ê¨°„ÅÆ„Éá„Éº„Çø„ÇíË°®Á§∫ */}
        <div className="col-span-1">
          {index === jsonData.length - 1 ? (
            <Card
              title="ÊúÄÁµÇ‰ΩçÁΩÆ"
              content=""
              displayMode="next"
            />
          ) : (
            <Card
              title="Next Data"
              content={JSON.stringify(jsonData[index + 1], null, 2)}
              displayMode="next"
              onClick={() => setIndex(index + 1)}
            />
          )}
        </div>

        {/* ÈÅ∏Êäû‰∏≠„ÅÆ„Éá„Éº„Çø„ÇíË°®Á§∫ */}
        <div className="col-span-2">
          <Card
            title="Selected Data"
            content={JSON.stringify(jsonData[index], null, 2)}
            displayMode="selected"
          />
        </div>
      </div>
    </div>
  );
}

export default JsonMainView;

```

### components\template\JsonReadLayout\index.ts

```
export * from './JsonReadLayout';

```

### components\template\JsonReadLayout\JsonReadLayout.tsx

```
import React from 'react';

const JsonReadLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
   return <div className="flex-1 p-6">{children}</div>;
};

export default JsonReadLayout;

```

### components\template\MainLayout\index.ts

```
export * from './MainLayout';

```

### components\template\MainLayout\MainLayout.tsx

```
import Link from 'next/link';
import { ReactNode } from 'react';

import { cn } from '@/lib/utils/cn';
import { useRecoilValue } from 'recoil';

import { themeAtom } from '@/state/atmos/themeAtom';

import Sidebar from '@/components/template/Sidebar/Sidebar';
import ThemeToggle from '@/components/molecules/ThemeToggle/ThemeToggle';
import { lightColors, darkColors, originalColors } from '@/styles/themeColorPalette';


interface MainLayoutProps {
  children: ReactNode;
  className?: string;
}

const links = [
  { slug: '/', label: 'Home' },
  { slug: '/about', label: 'About' }
];

export const MainLayout = ({ children, className }: MainLayoutProps) => {
  const theme = useRecoilValue(themeAtom);
  const wrapperStyles = cn('layout flex flex-col h-screen', className);

  const getColors = () => {
    switch (theme) {
      case 'light':
        return lightColors;
      case 'dark':
        return darkColors;
      default:
        const originalIndex = parseInt(theme.replace('original', ''), 10);
        return originalColors[originalIndex];
    }
  };

  const colors = getColors();

  return (
    <div>
      <div className={wrapperStyles}>
        <div style={{ backgroundColor: colors.main, color: colors.text }}>
          <header className="py-4 px-6" style={{ backgroundColor: colors.header }}>
            <div className="flex justify-between items-center">
              <ul className="flex items-center gap-10 text-gray-500">
                {links.map(({ slug, label }) => (
                  <li key={slug}>
                    <Link href={slug} className="inline-block p-2 transition-colors hover:text-green-300">
                      {label}
                    </Link>
                  </li>
                ))}
              </ul>
              <ThemeToggle />
            </div>
          </header>
          <div className="flex flex-1 h-full" style={{ backgroundColor: colors.sidebar }}>
            <Sidebar
              backgroundColor={colors.sidebar}
              textColor={colors.text}
              selectedBackgroundColor={colors.sidebarSelected}
              selectedTextColor={colors.text}
              hoverBackgroundColor={colors.sidebarHover}
            />
            <main className="flex-1 p-6">
              {children}
            </main>
          </div>
          <footer className="flex items-center justify-center p-4" style={{ backgroundColor: colors.footer }}>
            „Éï„Ç°„Ç§„É´Âêç
          </footer>
        </div>
      </div>
    </div>
  );
};

export default MainLayout;

```

### components\template\Sidebar\index.ts

```
export * from './Sidebar';

```

### components\template\Sidebar\Sidebar.tsx

```
// components/organisms/Sidebar.tsx
import { useRecoilState, useRecoilValue } from 'recoil';
import { indexAtom, jsonDataAtom } from '@/state/atmos/jsonDataAtom';

interface SidebarProps {
  backgroundColor: string;
  textColor: string;
  selectedBackgroundColor: string;
  selectedTextColor: string;
  hoverBackgroundColor: string;
}

const Sidebar: React.FC<SidebarProps> = ({
  backgroundColor,
  textColor,
  selectedBackgroundColor,
  selectedTextColor,
  hoverBackgroundColor,
}) => {
  const jsonData = useRecoilValue(jsonDataAtom);
  const [index, setIndex] = useRecoilState(indexAtom);

  return (
    <div
      className={`p-4 h-full overflow-y-auto`}
      style={{ backgroundColor, color: textColor }}
    >
      <div>„Éá„Éº„Çø‰ª∂Êï∞: {jsonData.length}</div>
      {jsonData.map((data, i) => (
        <div
          key={i}
          className={`py-2 px-4 cursor-pointer truncate ${index === i
            ? `bg-[${selectedBackgroundColor}] text-[${selectedTextColor}]`
            : `hover:bg-[${hoverBackgroundColor}]`
            }`}
          onClick={() => setIndex(i)}
        >
          {`${i}: ${data.category}`}
        </div>
      ))}
    </div>
  );
};

export default Sidebar;

```

### data\evalDatasetlist.csv

```
Ôªøhttps://zenn.dev/toshi_456/articles/957518bef2317b,https://llm-jp.github.io/awesome-japanese-llm/,

jglue

"jamp: JAMPDatasetProcessor,"
"janli: JaNLIDatasetProcessor,"
"jcommonsenseqa: JCommonsenseQADatasetProcessor,"
"jemhopqa: JEMHopQADatasetProcessor,"
"jnli: JNLIDatasetProcessor,"
"jsem: JSeMDatasetProcessor,"
"jsick: JSICKDatasetProcessor,"
"jsquad: JSQuADDatasetProcessor,"
"jsts: JSTSDatasetProcessor,"
"niilc: NIILCDatasetProcessor,"
"chabsa: ChabsaDatasetProcessor,"
"mawps: MawpsDatasetProcessor,"
"wiki_reading: WikipediaReadingDatasetProcessor,"
"wiki_ner: WikipediaNERDatasetProcessor,"
"wiki_dependency: WikipediaDependencyDatasetProcessor,"
"wiki_pas: WikipediaPASDatasetProcessor,"
"wiki_coreference: WikipediaCoreferenceDatasetProcessor,"

```

### hooks\useFileUpload.ts

```
'use client';

import { useState } from 'react';

const useFileUpload = () => {
  const [fileData, setFileData] = useState<File | null>(null);

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files ? event.target.files[0] : null;

    if (file && file.type === 'application/json') {
      setFileData(file);
    } else {
      // „Åì„Åì„Åß„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åô„Çã„Åã„ÄÅ‰∏çÊ≠£„Å™„Éï„Ç°„Ç§„É´„Çø„Ç§„Éó„Åß„ÅÇ„Çã„Åì„Å®„Çí„É¶„Éº„Ç∂„Éº„Å´Áü•„Çâ„Åõ„Çã
      console.error("Invalid file type. Please select a json or jsonl file.");
    }
  };

  return { fileData, handleFileUpload };
};

export default useFileUpload;

```

### lib\db.ts

```
import { Database } from 'sqlite3';

const sqlite3 = require('sqlite3').verbose();

const db = new sqlite3.Database(':memory:');

export async function query(sql: string, params?: any[]) {
  return new Promise((resolve, reject) => {
    db.all(sql, params, (err: Error | null, rows: any[]) => { // Added type annotation for 'err' parameter
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });
}
```

### lib\env\env.mjs

```
import { createEnv } from '@t3-oss/env-nextjs';
// import { z } from 'zod';

const skipValidation =
  !!process.env.SKIP_ENV_VALIDATION &&
  process.env.SKIP_ENV_VALIDATION !== 'false' &&
  process.env.SKIP_ENV_VALIDATION !== '0';

export const env = createEnv({
  skipValidation,
  server: {},
  client: {
    // NEXT_PUBLIC_EXAMPLE: z.string()
  },
  runtimeEnv: {
    // NEXT_PUBLIC_EXAMPLE: process.env.NEXT_PUBLIC_EXAMPLE
  }
});

```

### lib\env\index.ts

```
export * from './env.mjs';

```

### lib\utils\cn\cn.ts

```
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

/**
 * The function `cn` is a TypeScript function that merges multiple class lists into a single class
 * list.
 * @param {ClassValue[]} classLists - classLists is a rest parameter that allows you to pass in
 * multiple class lists as arguments. Each class list is represented by the ClassValue type.
 */
export const cn = (...classLists: ClassValue[]) => twMerge(clsx(classLists));

```

### lib\utils\cn\index.ts

```
export * from './cn';

```

### lib\utils\helpers\countOccurrences.ts

```
export function countOccurrences(array: any[], key: string): { [key: string]: number } {
  return array.reduce((acc, obj) => {
    const property = obj[key];
    acc[property] = (acc[property] || 0) + 1;
    return acc;
  }, {});
}
```

### lib\utils\helpers\helpers.ts

```
// helpers.js
export default function processJsonData(jsonData: JSON | any) {
}

export function countOccurrences(array: any[], key: string): { [key: string]: number } {
  return array.reduce((acc, obj) => {
    const property = obj[key];
    acc[property] = (acc[property] || 0) + 1;
    return acc;
  }, {});
}

export const parseJsonData = (content: string) => {
  const jsonData = [];

  // llm-jp-eval„ÅÆ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄ
  try {
    return JSON.parse(content);
  } catch (error) {
    console.error('ÁÑ°Âäπ„Å™JSON„Éá„Éº„Çø:', content);
    return [];
  }

  // ÈÄöÂ∏∏„ÅÆJSON„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄ
  // const lines = content.split(/\r?\n/);
  // for (const line of lines) {
  //   if (line.trim()) {
  //     try {
  //       const parsedLine = JSON.parse(line);
  //       jsonData.push(parsedLine);
  //     } catch (error) {
  //       console.error('ÁÑ°Âäπ„Å™JSON„Éá„Éº„Çø:', line);
  //     }
  //   }
  // }

  return jsonData;
};

```

### lib\utils\helpers\index.tx

```
export * from './helpers';

```

### postcss.config.js

```
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

```

### public\next.svg

```
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
```

### public\vercel.svg

```
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>
```

### README.md

```
ÂèÇËÄÉ„Å´„Åó„Åü„Çµ„Ç§„Éà
# https://zenn.dev/siakas/articles/05481bdefacd13

This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.


ÁèæÂú®Âà∂‰Ωú‰∏≠

```

### state\atmos\jsonDataAtom.ts

```
import { atom } from 'recoil';

export const jsonDataAtom = atom<any[]>({
  key: 'jsonData',
  default: [],
});

export const indexAtom = atom({
  key: 'index',
  default: 0,
});
```

### state\atmos\themeAtom.ts

```
import { darkColors, lightColors, originalColors, trendyColors1, trendyColors2, trendyColors3, trendyColors4, trendyColors5 } from '@/styles/themeColorPalette';
import { atom } from 'recoil';

export type ThemeMode = 'light' | 'dark' | 'original' | 'trendy1' | 'trendy2' | 'trendy3' | 'trendy4' | 'trendy5';

export const themeAtom = atom<ThemeMode>({
  key: 'themeAtom',
  default: 'light',
});

export const lightThemeColors = atom({
  key: 'lightThemeColors',
  default: lightColors,
});

export const darkThemeColors = atom({
  key: 'darkThemeColors',
  default: darkColors,
});

export const originalThemeColors = atom({
  key: 'originalThemeColors',
  default: originalColors,
});

export const trendy1ThemeColors = atom({
  key: 'trendy1ThemeColors',
  default: trendyColors1,
});

export const trendy2ThemeColors = atom({
  key: 'trendy2ThemeColors',
  default: trendyColors2,
});

export const trendy3ThemeColors = atom({
  key: 'trendy3ThemeColors',
  default: trendyColors3,
});

export const trendy4ThemeColors = atom({
  key: 'trendy4ThemeColors',
  default: trendyColors4,
});

export const trendy5ThemeColors = atom({
  key: 'trendy5ThemeColors',
  default: trendyColors5,
});

```

### state\FileUploader.tsx

```
import { jsonDataAtom } from '@/state/atmos/jsonDataAtom';
import { useSetRecoilState } from 'recoil';

const FileUploader = () => {
  const setJsonData = useSetRecoilState(jsonDataAtom);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const fileReader = new FileReader();

    if (event.target.files?.length) {
      const file = event.target.files[0];

      fileReader.readAsText(file);
      fileReader.onload = () => {
        try {
          // JSONL„Éï„Ç°„Ç§„É´„ÇíË°å„Åî„Å®„Å´ÂàÜÂâ≤„Åó„ÄÅÂêÑË°å„ÇíJSON„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å®„Åó„Å¶„Éë„Éº„Çπ
          const jsonLines = (fileReader.result as string).split(/\r?\n/);
          const jsonData = jsonLines.map(line => line ? JSON.parse(line) : null).filter(line => line);
          setJsonData(jsonData);
        } catch (error) {
          console.error('„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ', error);
        }
      };
    }
  };

  return (
    <div>
      <p>JSONL„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
      <input type="file" onChange={handleFileChange} accept=".json,.jsonl" />
    </div>
  );
};

export default FileUploader;
```

### state\JsonPaginator.tsx

```
import { indexAtom, jsonDataAtom } from '@/state/atmos/jsonDataAtom';
import { useRecoilState } from 'recoil';

const JsonPaginator = () => {
  const [jsonData, setJsonData] = useRecoilState(jsonDataAtom);
  const [index, setIndex] = useRecoilState(indexAtom);

  // Ê¨°„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
  const showNextItems = () => {
    if (index + 1 < jsonData.length) {
      setIndex(index + 1);
    }
  };

  // Ââç„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
  const showPreviousItems = () => {
    if (index - 1 >= 0) {
      setIndex(index - 1);
    }
  };

  return (
    <div>
      {jsonData && jsonData.length > 0 ? (<button onClick={showPreviousItems} disabled={index === 0}>Ââç„Å∏</button>): null}
      {jsonData && jsonData.length > 0 ? (<button onClick={showNextItems} disabled={index + 1 >= jsonData.length}>Ê¨°„Å∏</button>): null }
    </div>
  );
};

export default JsonPaginator;
```

### state\selectors\currentThemeColorsSelector.ts

```
import { selector } from 'recoil';
import { themeAtom, lightThemeColors, darkThemeColors, originalThemeColors, trendy1ThemeColors, trendy2ThemeColors, trendy3ThemeColors, trendy4ThemeColors, trendy5ThemeColors } from '@/state/atmos/themeAtom';

export const currentThemeColorsSelector = selector({
  key: 'currentThemeColorsSelector',
  get: ({ get }) => {
    const themeMode = get(themeAtom);
    switch (themeMode) {
      case 'light':
        return get(lightThemeColors);
      case 'dark':
        return get(darkThemeColors);
      case 'original':
        return get(originalThemeColors);
      case 'trendy1':
        return get(trendy1ThemeColors);
      case 'trendy2':
        return get(trendy2ThemeColors);
      case 'trendy3':
        return get(trendy3ThemeColors);
      case 'trendy4':
        return get(trendy4ThemeColors);
      case 'trendy5':
        return get(trendy5ThemeColors);
      default:
        return get(lightThemeColors); // „Éá„Éï„Ç©„É´„Éà„ÅÆ„ÉÜ„Éº„Éû„Ç´„É©„Éº
    }
  },
});

```

### styles\globals.css

```
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --text-color: #000;
  --bg-color: #fff;
}

.dark {
  --text-color: #fff;
  --bg-color: #000;
}

body {
  color: var(--text-color);
  background-color: var(--bg-color);
  font-family: 'Hiragino Kaku Gothic ProN', '„Éí„É©„ÇÆ„ÉéËßí„Ç¥ ProN W3', Meiryo, „É°„Ç§„É™„Ç™, Osaka, 'MS PGothic', arial, helvetica, sans-serif;
}

```

### styles\themeColorPalette.ts

```
// light „ÉÜ„Éº„Éû„Ç´„É©„Éº
export const lightColors = {
  header: '#f8f9fa',
  sidebar: '#e9ecef',
  sidebarSelected: '#dee2e6',
  sidebarHover: '#ced4da',
  main: '#ffffff',
  footer: '#dee2e6',
  text: '#212529',
  link: '#007bff',
};

// dark „ÉÜ„Éº„Éû„Ç´„É©„Éº
export const darkColors = {
  header: '#343a40',
  sidebar: '#495057',
  sidebarSelected: '#6c757d',
  sidebarHover: '#ced4da',
  main: '#212529',
  footer: '#343a40',
  text: '#f8f9fa',
  link: '#00d4ff',
};

export const originalColors = [
  {
    name: 'Ocean',
    header: '#2c3e50',
    sidebar: '#34495e',
    sidebarSelected: '#2980b9',
    sidebarHover: '#ced4da',
    main: '#ecf0f1',
    footer: '#34495e',
    text: '#2c3e50',
    link: '#3498db',
  },
];

export const trendyColors1 = {
  name: 'TikTok Marketing Partners',
  header: '#000000',
  sidebar: '#74f0ed',
  sidebarSelected: '#ea445a',
  sidebarHover: '#ced4da',
  main: '#ffffff',
  footer: '#000000',
  text: '#000000',
  link: '#74f0ed',
};

export const trendyColors2 = {
  name: 'Bold by Nature',
  header: '#172d13',
  sidebar: '#d76f30',
  sidebarSelected: '#6bb77b',
  sidebarHover: '#ced4da',
  main: '#ffffff',
  footer: '#172d13',
  text: '#ffffff',
  link: '#d76f30',
};

export const trendyColors3 = {
  name: 'Amour',
  header: '#5ac3b0',
  sidebar: '#de5935',
  sidebarSelected: '#f7cd46',
  sidebarHover: '#ced4da',
  main: '#ffffff',
  footer: '#5ac3b0',
  text: '#2c3e50',
  link: '#de5935',
};

export const trendyColors4 = {
  name: 'The Authentic Brief',
  header: '#fdf5df',
  sidebar: '#5ebec4',
  sidebarSelected: '#f92c85',
  sidebarHover: '#ced4da',
  main: '#ffffff',
  footer: '#fdf5df',
  text: '#2c3e50',
  link: '#5ebec4',
};

export const trendyColors5 = {
  name: '70‚Äôs Inspired',
  header: '#101357',
  sidebar: '#fea49f',
  sidebarSelected: '#fbaf08',
  sidebarHover: '#ced4da',
  main: '#ffffff',
  footer: '#101357',
  text: '#ffffff',
  link: '#fea49f',
};

```

### tailwind.config.ts

```
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
      colors: {
        'light-text': '#000',
        'dark-text': '#fff',
      },
    },
  },
  plugins: [],
  darkMode: 'class'
};
export default config;

```

### tsconfig.json

```
{
  "compilerOptions": {
    "target": "esnext",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "dist/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

```
